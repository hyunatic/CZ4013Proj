{"ast":null,"code":"import { isBinary } from \"./is-binary.js\";\n/**\r\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @public\r\n */\n\nexport function deconstructPacket(packet) {\n  const buffers = [];\n  const packetData = packet.data;\n  const pack = packet;\n  pack.data = _deconstructPacket(packetData, buffers);\n  pack.attachments = buffers.length; // number of binary 'attachments'\n\n  return {\n    packet: pack,\n    buffers: buffers\n  };\n}\n\nfunction _deconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (isBinary(data)) {\n    const placeholder = {\n      _placeholder: true,\n      num: buffers.length\n    };\n    buffers.push(data);\n    return placeholder;\n  } else if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n\n    for (let i = 0; i < data.length; i++) {\n      newData[i] = _deconstructPacket(data[i], buffers);\n    }\n\n    return newData;\n  } else if (typeof data === \"object\" && !(data instanceof Date)) {\n    const newData = {};\n\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        newData[key] = _deconstructPacket(data[key], buffers);\n      }\n    }\n\n    return newData;\n  }\n\n  return data;\n}\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @public\r\n */\n\n\nexport function reconstructPacket(packet, buffers) {\n  packet.data = _reconstructPacket(packet.data, buffers);\n  packet.attachments = undefined; // no longer useful\n\n  return packet;\n}\n\nfunction _reconstructPacket(data, buffers) {\n  if (!data) return data;\n\n  if (data && data._placeholder) {\n    return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n  } else if (Array.isArray(data)) {\n    for (let i = 0; i < data.length; i++) {\n      data[i] = _reconstructPacket(data[i], buffers);\n    }\n  } else if (typeof data === \"object\") {\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        data[key] = _reconstructPacket(data[key], buffers);\n      }\n    }\n  }\n\n  return data;\n}","map":{"version":3,"sources":["C:/Users/Iskandar/Downloads/CZ4013Proj/client/node_modules/socket.io-client/node_modules/socket.io-parser/build/esm/binary.js"],"names":["isBinary","deconstructPacket","packet","buffers","packetData","data","pack","_deconstructPacket","attachments","length","placeholder","_placeholder","num","push","Array","isArray","newData","i","Date","key","Object","prototype","hasOwnProperty","call","reconstructPacket","_reconstructPacket","undefined"],"mappings":"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","sourcesContent":["import { isBinary } from \"./is-binary.js\";\r\n/**\r\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\r\n *\r\n * @param {Object} packet - socket.io event packet\r\n * @return {Object} with deconstructed packet and list of buffers\r\n * @public\r\n */\r\nexport function deconstructPacket(packet) {\r\n    const buffers = [];\r\n    const packetData = packet.data;\r\n    const pack = packet;\r\n    pack.data = _deconstructPacket(packetData, buffers);\r\n    pack.attachments = buffers.length; // number of binary 'attachments'\r\n    return { packet: pack, buffers: buffers };\r\n}\r\nfunction _deconstructPacket(data, buffers) {\r\n    if (!data)\r\n        return data;\r\n    if (isBinary(data)) {\r\n        const placeholder = { _placeholder: true, num: buffers.length };\r\n        buffers.push(data);\r\n        return placeholder;\r\n    }\r\n    else if (Array.isArray(data)) {\r\n        const newData = new Array(data.length);\r\n        for (let i = 0; i < data.length; i++) {\r\n            newData[i] = _deconstructPacket(data[i], buffers);\r\n        }\r\n        return newData;\r\n    }\r\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\r\n        const newData = {};\r\n        for (const key in data) {\r\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\r\n                newData[key] = _deconstructPacket(data[key], buffers);\r\n            }\r\n        }\r\n        return newData;\r\n    }\r\n    return data;\r\n}\r\n/**\r\n * Reconstructs a binary packet from its placeholder packet and buffers\r\n *\r\n * @param {Object} packet - event packet with placeholders\r\n * @param {Array} buffers - binary buffers to put in placeholder positions\r\n * @return {Object} reconstructed packet\r\n * @public\r\n */\r\nexport function reconstructPacket(packet, buffers) {\r\n    packet.data = _reconstructPacket(packet.data, buffers);\r\n    packet.attachments = undefined; // no longer useful\r\n    return packet;\r\n}\r\nfunction _reconstructPacket(data, buffers) {\r\n    if (!data)\r\n        return data;\r\n    if (data && data._placeholder) {\r\n        return buffers[data.num]; // appropriate buffer (should be natural order anyway)\r\n    }\r\n    else if (Array.isArray(data)) {\r\n        for (let i = 0; i < data.length; i++) {\r\n            data[i] = _reconstructPacket(data[i], buffers);\r\n        }\r\n    }\r\n    else if (typeof data === \"object\") {\r\n        for (const key in data) {\r\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\r\n                data[key] = _reconstructPacket(data[key], buffers);\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}