{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Iskandar\\\\Downloads\\\\CZ4013Proj\\\\client\\\\src\\\\pages\\\\MonitorUpdate.jsx\";\nimport React, { Component } from 'react';\nimport { MDBContainer, MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\";\nimport { connect } from 'react-redux';\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\nimport { io } from \"socket.io-client\";\nimport { Marshalling, UnMarshalling } from '../Redux/Actions/MarshalService'; //Always instantiate this\n\nconst socket = io('http://localhost:2222/', {\n  transports: ['websocket']\n});\n\nclass MonitorUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      accountAmount: 0,\n      timeoutRetransmit: true,\n      logger: []\n    };\n\n    this.CheckUpdate = () => {\n      socket.on('monitor-updates', data => {\n        data = UnMarshalling(data);\n        dataArray = data['Server-Response'];\n        data = data['Server-Response'][0];\n        var checkExists = this.state.loggger.some(x => x.AccountNo === data.AccountNo && x.AccName === data.AccName && x.Balance === data.Balance && x.Function === data.Function);\n        if (!checkExists) this.setState({\n          logger: [...this.state.logger, ...dataArray]\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.CheckUpdate(), 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(MDBContainer, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Monitoring Update: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(MDBTable, {\n          children: [/*#__PURE__*/_jsxDEV(MDBTableHead, {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Account Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Account Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Function Used\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(MDBTableBody, {\n            children: this.state.logger && this.state.logger.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: x.AccountNo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: x.AccName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 58,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: x.Balance\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 59,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: x.Function\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MonitorUpdate;","map":{"version":3,"sources":["C:/Users/Iskandar/Downloads/CZ4013Proj/client/src/pages/MonitorUpdate.jsx"],"names":["React","Component","MDBContainer","MDBTable","MDBTableBody","MDBTableHead","connect","Navbar","Footer","io","Marshalling","UnMarshalling","socket","transports","MonitorUpdate","state","accountAmount","timeoutRetransmit","logger","CheckUpdate","on","data","dataArray","checkExists","loggger","some","x","AccountNo","AccName","Balance","Function","setState","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","map"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,YAAjC,EAA+CC,YAA/C,QAAmE,UAAnE;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,EAAT,QAAmB,kBAAnB;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,iCAA3C,C,CAEA;;AACA,MAAMC,MAAM,GAAGH,EAAE,CAAC,wBAAD,EAA2B;AAAEI,EAAAA,UAAU,EAAE,CAAC,WAAD;AAAd,CAA3B,CAAjB;;AAEA,MAAMC,aAAN,SAA4Bb,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAElCc,KAFkC,GAE1B;AACJC,MAAAA,aAAa,EAAE,CADX;AAEJC,MAAAA,iBAAiB,EAAE,IAFf;AAGJC,MAAAA,MAAM,EAAE;AAHJ,KAF0B;;AAAA,SAalCC,WAbkC,GAapB,MAAM;AAChBP,MAAAA,MAAM,CAACQ,EAAP,CAAU,iBAAV,EAA8BC,IAAD,IAAU;AACnCA,QAAAA,IAAI,GAAGV,aAAa,CAACU,IAAD,CAApB;AACAC,QAAAA,SAAS,GAAGD,IAAI,CAAC,iBAAD,CAAhB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAAC,iBAAD,CAAJ,CAAwB,CAAxB,CAAP;AAGA,YAAIE,WAAW,GAAG,KAAKR,KAAL,CAAWS,OAAX,CAAmBC,IAAnB,CAAwBC,CAAC,IAAIA,CAAC,CAACC,SAAF,KAAgBN,IAAI,CAACM,SAArB,IAAkCD,CAAC,CAACE,OAAF,KAAcP,IAAI,CAACO,OAArD,IAAgEF,CAAC,CAACG,OAAF,KAAcR,IAAI,CAACQ,OAAnF,IAA8FH,CAAC,CAACI,QAAF,KAAeT,IAAI,CAACS,QAA/I,CAAlB;AACA,YAAI,CAACP,WAAL,EACI,KAAKQ,QAAL,CAAc;AAAEb,UAAAA,MAAM,EAAE,CAAC,GAAG,KAAKH,KAAL,CAAWG,MAAf,EAAuB,GAAGI,SAA1B;AAAV,SAAd;AACP,OATD;AAUH,KAxBiC;AAAA;;AAOlCU,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM,KAAKf,WAAL,EAAP,EAA2B,IAA3B,CAA3B;AACH;;AACDgB,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,QAAN,CAAb;AACH;;AAcDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADJ,eACc;AAAA;AAAA;AAAA;AAAA,cADd,eAEI,QAAC,YAAD;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,QAAD;AAAA,kCACI,QAAC,YAAD;AAAA,mCACI;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eASI,QAAC,YAAD;AAAA,sBACK,KAAKtB,KAAL,CAAWG,MAAX,IAAqB,KAAKH,KAAL,CAAWG,MAAX,CAAkBoB,GAAlB,CAAsBZ,CAAC,IAAI;AAC7C,kCACI;AAAA,wCACI;AAAA,4BAAKA,CAAC,CAACC;AAAP;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAA,4BAAKD,CAAC,CAACE;AAAP;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAA,4BAAKF,CAAC,CAACG;AAAP;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAA,4BAAKH,CAAC,CAACI;AAAP;AAAA;AAAA;AAAA;AAAA,wBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ;AAOH,aARqB;AAD1B;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eA0BI;AAAA;AAAA;AAAA;AAAA,cA1BJ,eA2BI;AAAA;AAAA;AAAA;AAAA,cA3BJ,eA4BI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAgCH;;AA3DiC;;AA8DtC,eAAgBhB,aAAhB","sourcesContent":["import React, { Component } from 'react'\r\nimport { MDBContainer, MDBTable, MDBTableBody, MDBTableHead } from \"mdbreact\"\r\nimport { connect } from 'react-redux'\r\nimport Navbar from '../components/share/Navbar'\r\nimport Footer from '../components/share/Footer'\r\nimport { io } from \"socket.io-client\"\r\nimport { Marshalling, UnMarshalling } from '../Redux/Actions/MarshalService'\r\n\r\n//Always instantiate this\r\nconst socket = io('http://localhost:2222/', { transports: ['websocket'] })\r\n\r\nclass MonitorUpdate extends Component {\r\n\r\n    state = {\r\n        accountAmount: 0,\r\n        timeoutRetransmit: true,\r\n        logger: []\r\n    }\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.CheckUpdate(), 5000)\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n    CheckUpdate = () => {\r\n        socket.on('monitor-updates', (data) => {\r\n            data = UnMarshalling(data)\r\n            dataArray = data['Server-Response']\r\n            data = data['Server-Response'][0]\r\n\r\n\r\n            var checkExists = this.state.loggger.some(x => x.AccountNo === data.AccountNo && x.AccName === data.AccName && x.Balance === data.Balance && x.Function === data.Function)\r\n            if (!checkExists)\r\n                this.setState({ logger: [...this.state.logger, ...dataArray] })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar /><br />\r\n                <MDBContainer>\r\n                    <h3>Monitoring Update: </h3>\r\n                    <MDBTable>\r\n                        <MDBTableHead>\r\n                            <tr>\r\n                                <th>Account Number</th>\r\n                                <th>Account Name</th>\r\n                                <th>Balance</th>\r\n                                <th>Function Used</th>\r\n                            </tr>\r\n                        </MDBTableHead>\r\n                        <MDBTableBody>\r\n                            {this.state.logger && this.state.logger.map(x => {\r\n                                return (\r\n                                    <tr>\r\n                                        <td>{x.AccountNo}</td>\r\n                                        <td>{x.AccName}</td>\r\n                                        <td>{x.Balance}</td>\r\n                                        <td>{x.Function}</td>\r\n                                    </tr>)\r\n                            })}\r\n                        </MDBTableBody>\r\n                    </MDBTable>\r\n                </MDBContainer>\r\n                <br />\r\n                <br />\r\n                <Footer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default (MonitorUpdate)\r\n"]},"metadata":{},"sourceType":"module"}