{"version":3,"sources":["components/questionpage/SolutionModal.jsx","components/questionpage/QuestionList.jsx","Redux/Actions/QuestActions.jsx","assets/ganyu.jpg","components/share/Navbar.jsx","components/share/Footer.jsx","components/questionpage/TutQuestionList.jsx","pages/Question.jsx","Redux/Actions/TwitterAction.jsx","Redux/Actions/GameActions.jsx","components/homepage/LeaderBoard.jsx","components/homepage/TwitterCard.jsx","pages/Home.jsx","components/share/GuestNavBar.jsx","Redux/Actions/AuthAction.jsx","components/loginpage/LoginForm.jsx","pages/Login.jsx","components/registerpage/RegisterForm.jsx","pages/Register.jsx","components/assignmentpage/TutorialTable.jsx","Redux/Actions/TutorialAction.jsx","components/assignmentpage/AddTutorial.jsx","pages/Assignment.jsx","pages/Logout.jsx","components/marking/StudentInfo.jsx","components/marking/MarkScoreComment.jsx","components/marking/MarkPicture.jsx","pages/Marking.jsx","pages/MarkingHome.jsx","pages/StudentSelect.jsx","components/studentmainpage/StudentSubmit.jsx","pages/StudentMain.jsx","components/share/Uploadfile.jsx","components/studentprofile/StudentProfileCard.jsx","pages/StudentProfile.jsx","components/profprofile/ProfProfileCard.jsx","pages/ProfessorProfile.jsx","pages/StudentNews.jsx","components/competepage/ClassmateList.jsx","components/competepage/StudentAssignment.jsx","pages/Compete.jsx","components/challengerpage/Competitorlist.jsx","components/challengerpage/Challengerlist.jsx","assets/friendly.jpg","pages/Challenger.jsx","components/challengerpage/CompetitorDetail.jsx","components/challengerpage/MyDetails.jsx","pages/Competitor.jsx","components/challengerpage/ChallengerDetail.jsx","pages/Challenge.jsx","components/mysubmissionpage/StudentCard.jsx","pages/MySubmission.jsx","components/reportpage/BarGraph.jsx","components/reportpage/StatisticalAnalysis.jsx","components/reportpage/LineGraph.jsx","components/reportpage/StudentCard.jsx","pages/Report.jsx","components/reportpage/TutorialAvgGraph.jsx","pages/ReportHome.jsx","router/Routes.js","Redux/Reducers/AuthReducers.jsx","Redux/Reducers/TwitterReducers.jsx","Redux/Reducers/GameReducers.jsx","Redux/Reducers/TutorialReducers.jsx","Redux/Reducers/QuestReducers.jsx","Redux/Reducers/RootReducer.jsx","Redux/Store/Store.jsx","App.js","registerServiceWorker.js","index.js"],"names":["Component","QuestionList","questions","addQuestion","striped","map","x","index","question","size","color","onClick","onAdd","questid","showTutorialQuestion","postData","dispatch","fetch","method","headers","body","JSON","stringify","then","res","json","data","type","payload","Navbar","state","collapseID","username","localStorage","getItem","usertype","toggleCollapse","this","setState","prevState","closeCollapse","collID","window","scrollTo","componentDidMount","props","validateLogin","render","dark","expand","fixed","scrolling","href","className","src","ganyu","height","alt","id","isOpen","navbar","right","exact","to","nav","caret","icon","Footer","Date","getFullYear","TutQuestionList","removeQuestion","onDelete","Question","tutid","match","params","getTutorialQuestions","form","getQuestionList","showAllQuestion","NotLoggedIn","history","push","getTutGrp","deleteQuestion","OnBack","addToTutorial","currentQuestion","allquestion","filter","post","tutgrp","solution","level","section","hint","filteredAllQuestion","tutquestion","find","z","Fragment","data-height","data-width","width","mozallowfullscreen","allow","msallowfullscreen","allowFullScreen","webkitallowfullscreen","allowtransparency","frameBorder","connect","quest","tutquestions","fetchPosts","fetchLeaderboard","getStudentSubmission","myCompletedTutorial","getCurrentUserScore","getCompetitorScore","Pagination","leaderboard","React","useState","columns","label","field","attributes","sort","rows","datatable","name","date","score","hover","entriesOptions","entries","pagesAmount","fullPagination","TwitterCard","style","waves","user","text","target","id_str","Home","twitterPosts","twitter","count","items","game","records","GuestNavbar","getStudentInfo","updateProfile","facebookAccountLink","getCompeteMyInfo","LoginForm","email","userpassword","fbid","fblogin","emaillogin","loading","wrongauth","emailError","passwordError","exceedtry","handleChange","e","value","validate","includes","EmailLogin","password","emailLogin","responseFacebook","response","FbLogin","facebookLogin","handleKeyPress","event","key","componentWillReceiveProps","nextProps","loginstatus","length","setItem","picture","Navigate","delay","outline","md","xl","iconClass","onChange","fontSize","onKeyPress","disabled","appId","fields","cssClass","callback","auth","login","Login","val","RegisterForm","cfmpassword","fbimage","fbdetails","nameError","cfmPasswordError","console","log","url","handleSelectList","Validate","isValid","emailForm","emailChecking","Register","registerUser","componentDidUpdate","prevProps","alert","textButton","registerstatus","status","emailcheck","TutorialTable","deleteTut","ViewTutorial","navigate","tutorial","tutname","createdby","addTutorial","showTutorials","showProfTutorial","AddTutorial","tutGroup","tutName","coins","userType","onSubmit","difficulty","addTut","getValue","handleTutList","group","error","success","htmlFor","min","max","onBack","tutorialgrp","Assignment","GetTutorials","DelTutorial","deleteTutorial","tutorialtable","Logout","clear","StudentInfo","student","MarkScoreComment","record","inputChange","markComplete","goBack","scoreError","commentError","placeholder","MarkPicture","image","Marking","submissionid","studid","comment","Number","MarkingComplete","updateScores","GoBack","getStudentDetails","getSubmission","Proptypes","func","isRequired","submission","questionlist","studentinfo","scores","MarkingHome","showUserTutorial","StudentSelect","ViewDetails","getStudents","studentlist","students","StudentSubmit","onSelect","ldrid","selectSubmission","mycompletedtask","StudentMain","viewMySubmission","completedtut","Uploadfile","file","onChangeHandleFile","files","reader","FileReader","readAsDataURL","addEventListener","result","picUpload","inputs","containerClassName","StudentProfileCard","studname","profilepic","studemail","studtutgrp","StudentProfile","fbDisplay","onChoose","onSubmitAll","PictureUploaded","pic","FbLink","facebookBtn","allTutorials","ProfProfileCard","ProfessorProfile","getProfDetails","getProfInfo","lg","sm","profinfo","StudentNews","ClassmateList","selectCompetitor","competitorSelect","onHover","linkColor","classmate","classmates","onMouseOver","onMouseLeave","StudentAssignment","SendNotification","leaderboardid","notification","myCompletedtut","myTut","Compete","competitor","competitorid","Assignmentdisplay","CompetitorSelect","CreateNotification","requestorid","sendCompeteRequest","getMycompletedTutList","getClassmate","currentclass","competeDisplay","Set","item","mytut","mates","Competitorlist","viewCompetition","compid","myldrid","myCompetitors","competitionid","Challengerlist","viewChallenge","oppldrid","challengerid","challenge","myChallenger","Challenger","ViewCompetition","ViewChallenge","CompeteMode","getCompetitor","getChallengers","getMyCompetitors","center","friendly","overlay","competitors","challengers","CompetitorDetail","details","MyDetails","Competitor","mystudid","SendComment","sendComment","getCompetitorDetails","getCompetitorScoreBoard","getMyScore","getmyDetails","myscore","myScore","parseInt","competitorscore","resultDisplay","checkCompetitorTut","currentUserInfo","myInfo","ChallengerDetail","Challenge","retrieveComment","getMyScoreBoard","getOppScore","getComment","challengerScore","challengecomment","competitormsg","StudentCard","MySubmission","getLeaderBoardSubmission","ProfComment","studSubmission","answer","BarGraph","chartData","GraphData","ViewStudent","elem","ind","_index","viewStudent","PopulateData","labels","datasets","backgroundColor","borderColor","borderWidth","options","scales","xAxes","display","scaleLabel","labelString","yAxes","StatisticalAnalysis","parseFloat","average","standardDeviation","minimum","maximum","CalclateStatistics","Math","reduce","total","current","toFixed","sqrt","pow","summation","i","textWhite","LineGraph","LineGraphData","fill","profile","Report","StudentAnalysis","selectedStudent","printPage","print","CurrentAssginmentScores","HighestScoreForEachStudent","prevIndex","findIndex","AssignmentScoreList","TutorialAvgGraph","ViewReport","uniqueTutId","results","org","convertKeytoArray","Object","keys","k","tutidAvg","averageOnEachtut","getTutName","Routes","path","component","ReportHome","initState","AuthReducers","action","TwitterReducers","GameReducers","TutorialReducers","QuestReducers","RootReducer","combineReducers","middleWare","thunk","store","createStore","applyMiddleware","App","Store","marginTop","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","document","getElementById","URL","process","origin","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b2bc9477.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { MDBContainer, MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\n\nclass SolutionModal extends Component {\n  /**\n   * state\n   * set modal to false\n   */\nstate = {\n  modal: false\n}\n\n/**\n * toggle\n * set modal to the opposite state\n */\ntoggle = () => {\n  this.setState({\n    modal: !this.state.modal\n  });\n}\n/**\n * SolutionModal\n * @returns \n */\nrender() {\n  return (\n    <MDBContainer>\n      <MDBBtn size=\"sm\" color=\"blue\" onClick={this.toggle}>View</MDBBtn>\n      <MDBModal isOpen={this.state.modal} toggle={this.toggle}>\n        <MDBModalHeader toggle={this.toggle}>Solution for Question {this.props.ind}</MDBModalHeader>\n        <MDBModalBody>\n          <p>Question: {this.props.question.question}</p><br/>\n          <p>Solution: {this.props.question.solution}</p>\n        </MDBModalBody>\n        <MDBModalFooter>\n          <MDBBtn color=\"red\" size=\"sm\" onClick={this.toggle}>Close</MDBBtn>\n        </MDBModalFooter>\n      </MDBModal>\n    </MDBContainer>\n    );\n  }\n}\n\nexport default SolutionModal;","import React from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\nimport SolutionModal from './SolutionModal'\n\n\nexport default function QuestionList({ questions, addQuestion }) {\n  let onAdd = (questid) => {\n    addQuestion(questid)\n  }\n  /**\n   * QuestionList\n   */\n  return (\n    <div>\n      <MDBTable striped>\n        <MDBTableHead>\n          <tr>\n            <th>#</th>\n            <th>Question</th>\n            <th>Add Question</th>\n          </tr>\n        </MDBTableHead>\n        <MDBTableBody>\n          {questions && questions.map((x, index) => {\n            return (\n              <tr key={x.questid}>\n                <td>{index + 1}</td>\n                <td>{x.question}</td>\n                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => onAdd(x.questid)}>Add</MDBBtn></td>              \n              </tr>\n            )\n          })}\n        </MDBTableBody>\n      </MDBTable>\n    </div>\n  )\n}\n","/**\n * Fetch addQuestions\n * @param {*} postData \n * @returns \n */\n\nexport const addQuestion = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/add/web/tutquest', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'ADD_QUESTION',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch deleteQuestion\n * @param {*} postData \n * @returns \n */\nexport const deleteQuestion = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/delete/tutquest', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'REMOVE_QUESTION',\n            payload: postData.questid\n        })\n        );\n}\n\n/**\n * Fetch showAllQuestions\n * @param {*} postData \n * @returns \n */\nexport const showAllQuestion = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/show/tutquest', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'SHOW_ALL_QUESTION',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch showTutorialQuestion\n * @param {*} postData \n * @returns \n */\nexport const showTutorialQuestion = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/show/tutquest', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'SHOW_TUT_QUESTION',\n            payload: data\n        })\n        );\n}","export default __webpack_public_path__ + \"static/media/ganyu.8b89bebd.jpg\";","import React, { Component } from 'react'\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBDropdown, MDBDropdownMenu, MDBDropdownToggle, MDBIcon, MDBDropdownItem } from 'mdbreact';\nimport ganyu from '../../assets/ganyu.jpg';\n\nclass Navbar extends Component {\n    /**\n     * state\n     * set collapsedID : \"\"\n     * get username from local storage name\n     * get usertype from local storage usertype\n     */\n    state = {\n        collapseID: '',\n        username: localStorage.getItem(\"name\"),\n        usertype: localStorage.getItem(\"usertype\")\n    };\n    componentDidMount() {\n        if (!this.state.username)\n            this.props.validateLogin()\n    }\n\n    /**\n     * ToogleCollapsed\n     * @param {*} collapseID \n     * @returns \n     */\n    toggleCollapse = collapseID => () =>\n        this.setState(prevState => ({\n            collapseID: prevState.collapseID !== collapseID ? collapseID : ''\n        }));\n\n        /**\n         * closeCollapsed\n         * @param {*} collID \n         * @returns \n         */\n    closeCollapse = collID => () => {\n        const { collapseID } = this.state;\n        window.scrollTo(0, 0);\n        collapseID === collID && this.setState({ collapseID: '' });\n    };\n\n    /**\n     * Navbar\n     * @returns Navbar\n     */\n    render() {\n        const { collapseID } = this.state;\n        const overlay = (\n            <div\n                id='sidenav-overlay'\n                style={{ backgroundColor: 'transparent' }}\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\n            />\n        );\n        if (this.state.usertype == \"Professor\") {\n            return (\n                <div>\n                    <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\n                        <MDBNavbarBrand href='/home' className='py-0 font-weight-bold'>\n                            <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\n                            <strong className='align-middle'>Ganyu</strong>\n                        </MDBNavbarBrand>\n                        <MDBNavbarToggler\n                            onClick={this.toggleCollapse('mainNavbarCollapse')}\n                        />\n                        <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\n                            <MDBNavbarNav right>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        exact\n                                        to='/home'\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                    >\n                                        <strong>Home</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/assignment'\n                                    >\n                                        <strong>Assignments</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/reporthome'\n                                    >\n                                        <strong>Report</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/seltut'\n                                    >\n                                        <strong>Marking</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBDropdown>\n                                        <MDBDropdownToggle nav caret>\n                                            <MDBIcon icon=\"user\" /> {this.state.username}\n                                        </MDBDropdownToggle>\n                                        <MDBDropdownMenu className=\"dropdown-default\">\n                                            <MDBDropdownItem href=\"/professorprofile\">Profile</MDBDropdownItem>\n                                            <MDBDropdownItem href=\"https://seproj.s3-ap-southeast-1.amazonaws.com/ganyubuild.zip\">Download Game</MDBDropdownItem>\n                                            <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\n                                        </MDBDropdownMenu>\n                                    </MDBDropdown>\n                                </MDBNavItem>\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBNavbar>\n                </div>\n            )\n        }\n        else {\n            return (\n                <div>\n                    <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\n                        <MDBNavbarBrand href='/home' className='py-0 font-weight-bold'>\n                            <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\n                            <strong className='align-middle'>Ganyu</strong>\n                        </MDBNavbarBrand>\n                        <MDBNavbarToggler\n                            onClick={this.toggleCollapse('mainNavbarCollapse')}\n                        />\n                        <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\n                            <MDBNavbarNav right>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        exact\n                                        to='/studentmain'\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                    >\n                                        <strong>Home</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/studentnews'\n                                    >\n                                        <strong>News</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/challenger'\n                                    >\n                                        <strong>Compete</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBNavLink\n                                        onClick={this.closeCollapse('mainNavbarCollapse')}\n                                        to='/assignment'\n                                    >\n                                        <strong>Assignments</strong>\n                                    </MDBNavLink>\n                                </MDBNavItem>\n                                <MDBNavItem>\n                                    <MDBDropdown>\n                                        <MDBDropdownToggle nav caret>\n                                            <MDBIcon icon=\"user\" /> {this.state.username}\n                                        </MDBDropdownToggle>\n                                        <MDBDropdownMenu className=\"dropdown-default\">\n                                            <MDBDropdownItem href=\"/studentprofile\">Profile</MDBDropdownItem>\n                                            <MDBDropdownItem href=\"https://seproj.s3-ap-southeast-1.amazonaws.com/ganyubuild.zip\">Download Game</MDBDropdownItem>\n                                            <MDBDropdownItem href='/logout'>Logout</MDBDropdownItem>\n                                        </MDBDropdownMenu>\n                                    </MDBDropdown>\n                                </MDBNavItem>\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBNavbar>\n                </div>\n            )\n        }\n    }\n}\nexport default Navbar","import React, { Component } from 'react'\nimport { MDBFooter } from 'mdbreact';\n\nexport default class Footer extends Component {\n    /**\n     * Footer \n     * @returns Footer\n     */\n    render() {\n        return (\n            <div>\n                <MDBFooter className=\"fixed-bottom\" color='indigo'>\n                    <p className='footer-copyright mb-0 py-3 text-center'>\n                        &copy; {new Date().getFullYear()} Copyright:\n              <a href='#'> Team Ganyu (NTU Project) </a>\n                    </p>\n                </MDBFooter>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\nimport SolutionModal from './SolutionModal'\n\n\nexport default function TutQuestionList({ questions, removeQuestion }) {\n  let onDelete = (questid) => {\n    removeQuestion(questid)\n  }\n  /**\n   * TutQuestionList\n   */\n  return (\n    <div>\n      <MDBTable striped>\n        <MDBTableHead>\n          <tr>\n            <th>#</th>\n            <th>Question</th>\n            <th>Remove</th>\n          </tr>\n        </MDBTableHead>\n        <MDBTableBody>\n          {questions && questions.map((x, index) => {\n            return (\n              <tr key={x.questid}>\n                <td>{index + 1}</td>\n                <td>{x.question}</td>\n                <td><MDBBtn size=\"sm\" color=\"red\" onClick={() => onDelete(x.questid)}>Remove</MDBBtn></td>              \n              </tr>\n            )\n          })}\n        </MDBTableBody>\n      </MDBTable>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol,MDBBtn } from \"mdbreact\";\nimport QuestionList from '../components/questionpage/QuestionList'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { showAllQuestion, addQuestion, deleteQuestion, showTutorialQuestion } from '../Redux/Actions/QuestActions'\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\nimport TutQuestionList from '../components/questionpage/TutQuestionList';\n\nclass Question extends Component {\n    /**\n     * state \n     * tutid : tutid\n     */\n    state = {\n        tutid: this.props.match.params.tutid,\n    };\n\n    /**\n     * getTutorialQuestions\n     */\n    getTutorialQuestions = () => {\n        const form = {\n            tutid: this.state.tutid,\n        }\n        this.props.showTutorialQuestion(form);\n    }\n    /**\n     * getQuestionList\n     */\n    getQuestionList = () => {\n        const form = {\n            tutid: '0',\n        }\n        this.props.showAllQuestion(form);\n    }\n    componentDidMount() {\n        this.getTutorialQuestions();\n        this.getQuestionList();\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * getTutGrp\n     * @returns tutgrp\n     */\n    getTutGrp = () => {\n        return localStorage.getItem(\"tutgrp\")\n    }\n    /**\n     * removeQuestion\n     * @param {*} questid \n     */\n    removeQuestion = (questid) => {\n        const form = {\n            questid: questid\n        }\n        this.props.deleteQuestion(form)\n    }\n    /**\n     * OnBack\n     * navigate to assignment\n     */\n    OnBack = () => {\n        this.props.history.push('/assignment')\n    }\n    /**\n     * addToTutorial\n     * @param {*} questid \n     */\n    addToTutorial = (questid) => {\n        let currentQuestion = this.props.allquestion.filter(x => x.questid === questid)\n        const post = {\n            question: currentQuestion[0].question,\n            tutgrp: this.getTutGrp(),\n            tutid: this.state.tutid,\n            solution: currentQuestion[0].solution,\n            level: currentQuestion[0].level,\n            section: currentQuestion[0].section,\n            hint: currentQuestion[0].hint\n        }\n        this.props.addQuestion(post)\n    }\n    /**\n     * Question page\n     * @returns Question page\n     */\n    render() {\n        let filteredAllQuestion = this.props.allquestion.filter(x => !this.props.tutquestion.find(z => z.question === x.question))\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol size=\"12\">\n                            <br />\n                            <h2>Current Tutorial Questions</h2>\n                            <hr />\n                            <TutQuestionList removeQuestion={this.removeQuestion} questions={this.props.tutquestion} />\n                        </MDBCol>\n                        <MDBCol size=\"12\">\n                            <h2>Add Pre-defined Questions</h2>\n                            <hr />\n                            {/* <AddQuestion addQuest={this.AddQuestion} onBack={this.OnBack} /> */}\n                            <QuestionList addQuestion={this.addToTutorial} questions={filteredAllQuestion} />\n                        </MDBCol>\n                        <MDBCol size=\"12\">\n                            <h2>Add New Question</h2>\n                            <hr />\n                            <div id=\"html_embed_widget_11018\" className=\"html_embed_widget embed_wrapper\">\n                                <div data-height=\"3000\" data-width=\"3000\" className=\"game_frame game_loaded\" className=\"embed-responsive embed-responsive-16by9\">\n                                    <iframe height=\"100%\" width=\"100%\" mozallowfullscreen=\"true\" allow=\"autoplay; fullscreen; geolocation; microphone; camera; midi\" src=\"https://aseweb.hyunatic.com/\" msallowfullscreen=\"true\" scrolling=\"no\" allowFullScreen={true} webkitallowfullscreen=\"true\" id=\"game_drop\" allowtransparency=\"true\" frameBorder=\"0\">\n                                    </iframe>\n                                </div>\n                            </div>\n                            <MDBBtn color=\"red\" onClick={this.OnBack}> Back\n                            </MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <br />\n                <br />\n                <Footer />\n            </React.Fragment>\n        )\n    }\n\n}\n\nQuestion.propTypes = {\n    showAllQuestion: PropTypes.func.isRequired,\n    addQuestion: PropTypes.func.isRequired,\n    deleteQuestion: PropTypes.func.isRequired,\n    showTutorialQuestion: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    tutquestion: state.quest.tutquestions,\n    allquestion: state.quest.questions\n});\n\n\nexport default connect(mapStateToProps, { showTutorialQuestion, showAllQuestion, addQuestion, deleteQuestion })(Question)","/**\n * Fetch Twitterpost\n * @returns \n */\nexport const fetchPosts = () => dispatch => {\n    fetch('https://breadplaza.com/api/public/index.php/api/ntusg')\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FETCH_POST',\n            payload: data\n        })\n        );\n}\n","/**\n * Fetch leaderboard\n * @returns \n */\n\nexport const fetchLeaderboard = () => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/leaderboard')\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FETCH_LEADERBOARD',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch getStudents\n * @param {*} postData \n * @returns \n */\nexport const getStudents = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/tut/student', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_STUDENT_LIST',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getStudentSubmission\n * @param {*} postData \n * @returns \n */\nexport const getStudentSubmission = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/student/submission', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_STUDENT_SUBMISSION',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch updateScores\n * @param {*} postData \n * @returns \n */\nexport const updateScores = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/marking/update', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'UPDATE_SCORES',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch mycompletedTutorial\n * @param {*} postData \n * @returns \n */\nexport const myCompletedTutorial = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/student/completed/tut', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'MY_COMPLETED_TUT',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch sendCompeteRequest\n * @param {*} postData \n * @returns \n */\nexport const sendCompeteRequest = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/start/compete', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'SEND_COMPETE_REQUEST',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getChallengers\n * @param {*} postData \n * @returns \n */\nexport const getChallengers = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/challengers', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_CHALLENGERS',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getMyCompetitors\n * @param {*} postData \n * @returns \n */\nexport const getMyCompetitors = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/competitors', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_COMPETITORS',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch sendComment\n * @param {*} postData \n * @returns \n */\nexport const sendComment = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/send/comment', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'SEND_COMMENT',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch getComment\n * @param {*} postData \n * @returns \n */\nexport const getComment = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/get/comment', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_COMMENT',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getCurrentUserScore\n * @param {*} postData \n * @returns \n */\nexport const getCurrentUserScore = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/user/competitor', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_MY_SCORE',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getCompetitorScore\n * @param {*} postData \n * @returns \n */\nexport const getCompetitorScore = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/competitor', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_COMPETITOR_SCORE',\n            payload: data\n        })\n        );\n}","import React from 'react';\nimport { MDBDataTableV5 } from 'mdbreact';\n\nexport default function Pagination({ leaderboard, tutgrp }) {\n  const [datatable, setDatatable] = React.useState({\n    columns: [\n      {\n        label: 'Name',\n        field: 'name',\n        width: 150,\n        attributes: {\n          'aria-controls': 'DataTable',\n          'aria-label': 'Name',\n        },\n      },\n      {\n        label: 'Date submitted',\n        field: 'date',\n        sort: 'disabled',\n        width: 150,\n      },\n      {\n        label: 'Score',\n        field: 'score',\n        sort: 'asc',\n        width: 100,\n      },\n    ],\n    rows: [],\n  });\n  //console.log(leaderboard)\n  leaderboard.filter(x => x.tutgrp === tutgrp).map(x => datatable.rows.push({ name: x.name, date: x.date, score: x.score }))\n\n\n  return <MDBDataTableV5 hover entriesOptions={[5, 10, 15]} entries={5} pagesAmount={4} data={datatable}  fullPagination />;\n} ","import React from 'react';\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from 'mdbreact';\n\nconst TwitterCard = ({ post }) => {\n  /**\n   * Twiitercard\n   * Display the twitter card and on click of a button , proceed to the website as indicated\n   */\n  return (\n    <MDBCol key={post.id_str} size=\"4\">\n      <MDBCard style={{ width: \"22rem\" }}>\n        <MDBCardImage className=\"img-fluid\" src=\"https://download.logo.wine/logo/Nanyang_Technological_University/Nanyang_Technological_University-Logo.wine.png\" waves />\n        <MDBCardBody>\n          <MDBCardTitle>{post.user.name}</MDBCardTitle>\n          <MDBCardText>\n            {post.text}\n          </MDBCardText>\n          <MDBBtn color=\"green\" href=\"https://twitter.com/NTUsg?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\"  target=\"_blank\">View</MDBBtn>\n        </MDBCardBody>\n      </MDBCard>\n    </MDBCol>\n  )\n}\n\nexport default TwitterCard;\n","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\"\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\nimport LeaderBoard from '../components/homepage/LeaderBoard'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\nimport TwitterCard from '../components/homepage/TwitterCard'\n\n\n\nclass Home extends Component {\n    /**\n     * state\n     * set usertype to local storage usertype\n     * set tutgrp to local storage tutgrp\n     */\n    state = {\n        usertype: localStorage.getItem(\"usertype\"),\n        tutgrp: localStorage.getItem(\"tutgrp\")\n    }\n    componentDidMount() {\n        if (this.state.usertype == \"Student\")\n            this.props.history.push(\"/studentmain\")\n        this.props.fetchLeaderboard();\n        this.props.fetchPosts();\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * Home page\n     * @returns Home page\n     */\n    render() {\n        let twitterPosts = this.props.twitter.map(x => {\n            return (\n                <TwitterCard key={x.id_str} post={x} />\n            )\n        })\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <MDBAnimation type=\"slideInDown\" count={1}>\n                        <br />\n                        \n                        <h2>Leader Board</h2>\n                        <hr />\n                        {this.props.leaderboard && <LeaderBoard leaderboard={this.props.leaderboard} tutgrp={this.state.tutgrp} />}\n                        <br />\n                    </MDBAnimation >\n                    <MDBAnimation type=\"slideInUp\" count={1}>\n                        <h2>NTU Twitter News</h2>\n                        <hr />\n                        <MDBRow>\n                            {twitterPosts}\n                        </MDBRow>\n                    </MDBAnimation>\n\n                </MDBContainer>\n                <MDBBtn />\n                <Footer />\n            </div>\n        )\n    }\n}\nHome.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    fetchLeaderboard: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    twitter: state.twitter.items,\n    leaderboard: state.game.records\n});\n\nexport default connect(mapStateToProps, { fetchPosts, fetchLeaderboard })(Home)\n","import React, { Component } from 'react'\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink } from 'mdbreact';\nimport ganyu from '../../assets/ganyu.jpg';\n\nclass GuestNavbar extends Component {\n    /**\n     * state\n     * set collapsedID to \"\"\n     */\n    state = {\n        collapseID: ''\n    };\n    /**\n     * toggleCollapse\n     * @param {*} collapseID \n     * @returns \n     */\n    toggleCollapse = collapseID => () =>\n        this.setState(prevState => ({\n            collapseID: prevState.collapseID !== collapseID ? collapseID : ''\n        }));\n\n    /**\n     * closeCollapsed\n     * @param {*} collID \n     * @returns \n     */\n    closeCollapse = collID => () => {\n        const { collapseID } = this.state;\n        window.scrollTo(0, 0);\n        collapseID === collID && this.setState({ collapseID: '' });\n    };\n\n    /**\n     * Guest Navbar\n     * @returns Guest Navbar \n     */\n    render() {\n        const { collapseID } = this.state;\n        const overlay = (\n            <div\n                id='sidenav-overlay'\n                style={{ backgroundColor: 'transparent' }}\n                onClick={this.toggleCollapse('mainNavbarCollapse')}\n            />\n        );\n        return (\n\n            <div>\n                <MDBNavbar color='indigo' dark expand='md' fixed='top' scrolling>\n                    <MDBNavbarBrand href='/' className='py-0 font-weight-bold'>\n                        <img src={ganyu} height=\"50\" alt=\"50\" className=\"rounded-circle\" />\n                        <strong className='align-middle'>Ganyu</strong>\n                    </MDBNavbarBrand>\n                    <MDBNavbarToggler\n                        onClick={this.toggleCollapse('mainNavbarCollapse')}\n                    />\n                    <MDBCollapse id='mainNavbarCollapse' isOpen={collapseID} navbar>\n                        <MDBNavbarNav right>\n                            <MDBNavItem>\n                                <MDBNavLink\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\n                                    to='/register'\n                                >\n                                    <strong>Register</strong>\n                                </MDBNavLink>\n                            </MDBNavItem>\n                            <MDBNavItem>\n                                <MDBNavLink\n                                    onClick={this.closeCollapse('mainNavbarCollapse')}\n                                    to='/logout'\n                                >\n                                    <strong>Login</strong>\n                                </MDBNavLink>\n                            </MDBNavItem>\n                        </MDBNavbarNav>\n                    </MDBCollapse>\n                </MDBNavbar>\n            </div>\n        )\n    }\n}\nexport default GuestNavbar","/**\n * Fetch emaillogin\n * @param {*} postData \n * @returns \n */\nexport const emailLogin = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/login', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'EMAIL_LOGIN',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch facebooklogin\n * @param {*} postData \n * @returns \n */\nexport const facebookLogin = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/fblogin', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FACEBOOK_LOGIN',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch registerUSer\n * @param {*} postData \n * @returns \n */\nexport const registerUser = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/register', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'REGISTER_USER',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch testCall\n * @param {*} postData \n * @returns \n */\nexport const testCall = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/test', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'TESTING',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch getStudentInfo\n * @param {*} postData \n * @returns \n */\nexport const getStudentInfo = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/studentinfo', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_STUDENT_DETAILS',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getProfInfo\n * @param {*} postData \n * @returns \n */\nexport const getProfInfo = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/profinfo', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_PROF_DETAILS',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch updateProfile\n * @param {*} postData \n * @returns \n */\nexport const updateProfile = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/profile/update', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'UPDATE_PROFILE',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch facebookAccountLink\n * @param {*} postData \n * @returns \n */\nexport const facebookAccountLink = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/facebook/link', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FACEBOOK_ACCOUNT_LINK',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch emailChecking\n * @param {*} postData \n * @returns \n */\nexport const emailChecking = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/email/check', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'EMAIL_CHECK',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch getCompeteMyInfo\n * @param {*} postData \n * @returns \n */\nexport const getCompeteMyInfo = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/studentinfo', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_MY_DETAILS',\n            payload: data\n        })\n        );\n}\n\n/**\n * Fetch Classmate list\n * @param {*} postData \n * @returns \n */\n export const getClassmate = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/myclassmate', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'GET_CLASSMATE',\n            payload: data\n        })\n        );\n}","import React from \"react\";\nimport {\n  MDBMask,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBtn,\n  MDBView,\n  MDBContainer,\n  MDBCard,\n  MDBCardBody,\n  MDBInput,\n  MDBAnimation,\n  MDBNavLink\n} from \"mdbreact\";\nimport \"../css/index.css\";\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { emailLogin, facebookLogin } from '../../Redux/Actions/AuthAction'\nimport FacebookLogin from 'react-facebook-login'\n\nclass LoginForm extends React.Component {\n  /**\n   * Set default state of email, userpassword, fbid, emailError, passwwordError to \"\", \n   * Set fblogin emaillogin, loeading, wrongauth to false,\n   * Set exceedtry to 0\n   */\n  state = {\n    email: '',\n    userpassword: '',\n    fbid: '',\n    fblogin: false,\n    emaillogin: false,\n    loading: false,\n    wrongauth: false,\n    emailError: \"\",\n    passwordError: \"\",\n    exceedtry: 0\n  };\n\n  toggleCollapse = collapseID => () =>\n    this.setState(prevState => ({\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n    }));\n  /**\n   * handleChange\n   * @param {*} e  handle all the changes that were received\n   */\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  /**\n   * Validate\n   * @returns errorhandling if there is an error \n   */\n  validate = () => {\n    let emailError = \"\";\n    let passwordError = \"\";\n\n    if (this.state.email) {\n      if (!this.state.email.includes('@')) {\n        emailError = \"invalid email\";\n      }\n    }\n    else {\n      emailError = \"email cannot be empty\";\n    }\n\n    if (!this.state.userpassword) {\n      passwordError = \"password cannot be empty\";\n    }\n    if (emailError || passwordError) {\n      this.setState({ emailError, passwordError })\n      return false;\n    }\n    return true;\n  };\n\n  /**\n   * EmailLogin\n   */\n  EmailLogin = () => {\n    const post = {\n\n      email: this.state.email,\n      password: this.state.userpassword\n\n    }\n    const isValid = this.validate();\n    if (isValid) {\n\n      this.setState({\n        loading: !this.state.loading,\n        emaillogin: true,\n        emailError: \"\",\n        passwordError: \"\"\n\n      });\n      this.props.emailLogin(post);\n\n    }\n  }\n  /**\n   * responseFacebook\n   * @param {*} response \n   */\n  responseFacebook = (response) => {\n    this.setState({\n      fbid: response.id,\n      fblogin: true\n    })\n    this.FbLogin(response.id)\n  }\n  /**\n   * FbLogin\n   * @param {*} id \n   */\n  FbLogin = (id) => {\n    const post = {\n      fbid: id\n    }\n    this.props.facebookLogin(post);\n  }\n  /**\n   * handleKeyPress\n   * @param {*} event upon clicking enter, proceed to use method EmailLogin \n   */\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter')\n      this.EmailLogin()\n  }\n\n  /**\n   * componentWillReceiveProps\n   * @param {*} nextProps \n   * set localstorage of the following: studid, fbid, name, email, usertype, tutgrp, picture\n   * else errorhandling for wrong authentication\n   */\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.loginstatus.length !== 0) {\n      //Correct Authentication \n      localStorage.setItem(\"studid\", nextProps.loginstatus[0].id)\n      localStorage.setItem(\"fbid\", nextProps.loginstatus[0].fbid)\n      localStorage.setItem(\"name\", nextProps.loginstatus[0].name)\n      localStorage.setItem(\"email\", nextProps.loginstatus[0].email)\n      localStorage.setItem(\"usertype\", nextProps.loginstatus[0].usertype)\n      localStorage.setItem(\"tutgrp\", nextProps.loginstatus[0].tutgrp)\n      localStorage.setItem(\"picture\", nextProps.loginstatus[0].picture)\n      this.props.Navigate(\"/home\")\n    }\n    else {\n      //Wrong authentication\n      //This is used to manipulate the UI\n      this.setState({\n        loading: !this.state.loading,\n        userpassword: '',\n        email: '',\n        wrongauth: true,\n        exceedtry: this.state.exceedtry++\n      })\n\n\n      if (this.state.exceedtry > 2) {\n\n      }\n\n\n      // if (this.state.wrongauthcount >= 5) {\n      //   alert(\"Forgot your email or password? Please contact the admin.\");\n      // }\n\n      /**\n       * LoginForm\n       */\n    }\n  }\n\n  render() {\n\n    const { loading } = this.state;\n    const { wrongauth, exceedtry } = this.state;\n\n\n    return (\n      <div id=\"classicformpage\">\n        <MDBView>\n          <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\n            <MDBContainer>\n              <MDBRow>\n                <MDBAnimation\n                  type=\"fadeInLeft\"\n                  delay=\".3s\"\n                  className=\"white-text text-center text-md-left col-md-6 mt-xl-5 mb-5\"\n                >\n                  <h1 className=\"h1-responsive font-weight-bold\">\n                    Sign up right now!\n                  </h1>\n                  <hr className=\"hr-light\" />\n                  <h6 className=\"mb-4\">\n                    Don't have an account? Register here!\n                  </h6>\n                  <MDBNavLink to='/register'>\n                    <MDBBtn outline color=\"white\">\n                      Register\n                  </MDBBtn>\n                  </MDBNavLink>\n                </MDBAnimation>\n\n                <MDBCol md=\"6\" xl=\"5\" className=\"mb-4\">\n                  <MDBAnimation type=\"fadeInRight\" delay=\".3s\">\n                    <MDBCard id=\"classic-card\">\n                      <MDBCardBody className=\"white-text\">\n                        <h3 className=\"text-center\">\n                          <MDBIcon icon=\"user\" /> Login:\n                        </h3>\n                        <hr className=\"hr-light\" />\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Enter Email\"\n                          icon=\"envelope\"\n                          id=\"email\"\n                          type=\"email\"\n                          value={this.state.email}\n                          onChange={this.handleChange}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }} > {this.state.emailError} </div>\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Enter Password\"\n                          icon=\"lock\"\n                          type=\"password\"\n                          id=\"userpassword\"\n                          value={this.state.userpassword}\n                          onChange={this.handleChange}\n                          onKeyPress={this.handleKeyPress}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.passwordError}</div>\n                        <div className=\"text-center mt-4 black-text\">\n                          <MDBBtn color=\"white\" onClick={this.EmailLogin} disabled={loading}>\n                            {loading && <span>Logging in</span>}\n                            {!loading && <span>login</span>}\n                          </MDBBtn>\n                          <FacebookLogin\n                            appId=\"892789337958489\"\n                            fields=\"name,email,picture\"\n                            cssClass=\"btn btn-outline white\"\n                            callback={this.responseFacebook}\n                          />\n                          <hr className=\"hr-light\" />\n                          {exceedtry > 1 && <h3 className=\"red-text\">Please Contact Admin</h3>}\n                          {wrongauth && <h3 className=\"red-text\">Wrong username or password</h3>}\n                        </div>\n                      </MDBCardBody>\n                    </MDBCard>\n                  </MDBAnimation>\n                </MDBCol>\n              </MDBRow>\n            </MDBContainer>\n          </MDBMask>\n        </MDBView>\n      </div>\n    );\n  }\n}\n\nLoginForm.propTypes = {\n  emailLogin: PropTypes.func.isRequired,\n  facebookLogin: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n  loginstatus: state.auth.login\n});\n\nexport default connect(mapStateToProps, { emailLogin, facebookLogin })(LoginForm);","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport GuestNavbar from '../components/share/GuestNavBar'\nimport LoginForm from '../components/loginpage/LoginForm'\n\n\n\nclass Login extends Component {\n    /**\n     * Navigate\n     * @param {*} val \n     */\n    Navigate = (val) => {\n        this.props.history.push(val)\n    }\n    componentDidMount() {\n    }\n\n    /**\n     * Login Page\n     * @returns Login Page\n     */\n    render() {\n        return (\n            <div>\n                <GuestNavbar />\n                <LoginForm Navigate={this.Navigate} />\n                \n                <Footer />\n            </div>\n        )\n    }\n}\nexport default Login","import React from \"react\";\nimport {\n  MDBMask,\n  MDBRow,\n  MDBCol,\n  MDBIcon,\n  MDBBtn,\n  MDBView,\n  MDBContainer,\n  MDBCard,\n  MDBCardBody,\n  MDBInput,\n  MDBAnimation,\n  MDBNavLink\n} from \"mdbreact\";\nimport \"../css/index.css\";\nimport FacebookLogin from 'react-facebook-login'\nimport PropTypes from 'prop-types'\nimport { registerUser, emailChecking } from '../../Redux/Actions/AuthAction'\nimport { connect } from 'react-redux'\n\nclass RegisterForm extends React.Component {\n  /**\n   * state \n   * set collapseId, email, password, cfmpassword, name, fbimage, fbid, nameError, emailError, passwordError, cfmPasswordError to \"\"\n   * set usertype to Student, tutgrp to TS1\n   * set fbdetails, loading to false\n   */\n  state = {\n    collapseID: \"\",\n    email: \"\",\n    password: \"\",\n    cfmpassword: \"\",\n    usertype: \"Student\",\n    name: \"\",\n    fbimage: \"\",\n    fbid: \"\",\n    tutgrp: \"TS1\",\n    fbdetails: false,\n    loading: false,\n    nameError: \"\",\n    emailError: \"\",\n    passwordError: \"\",\n    cfmPasswordError: \"\",\n  };\n\n  toggleCollapse = collapseID => () =>\n    this.setState(prevState => ({\n      collapseID: prevState.collapseID !== collapseID ? collapseID : \"\"\n    }));\n\n    /**\n     * responseFacebook\n     * @param {*} response \n     */\n  responseFacebook = (response) => {\n    console.log(response)\n    this.setState({\n      fbid: response.id,\n      fbimage: response.picture.data.url,\n      email: response.email,\n      name: response.name,\n      fbdetails: true\n    })\n  }\n  /**\n   * handleSelectList\n   * @param {*} e \n   */\n  handleSelectList = (e) => {\n    this.setState({\n      tutgrp: e.target.value\n    })\n  }\n\n  /**\n   * Validate\n   * errorhandling\n   */\n  Validate = () => {\n    let nameError = \"\";\n    let emailError = \"\";\n    let passwordError = \"\";\n    let cfmPasswordError = \"\";\n    let isValid = true;\n\n    if (!this.state.name) {\n      nameError = \"name cannot be empty\";\n    }\n\n    if (this.state.email) {\n      if (!this.state.email.includes('@')) {\n        emailError = \"invalid email\";\n      }\n    }\n    else {\n      emailError = \"email cannot be empty\";\n    }\n\n    if (this.state.password) {\n      if (this.state.password != this.state.cfmpassword) {\n        cfmPasswordError = \"password fields do not tally\"\n      }\n    }\n    else{\n      passwordError = \"password cannot be empty\";\n    }\n\n    if (emailError || passwordError || nameError ||cfmPasswordError) {\n      this.setState({ emailError, passwordError, nameError ,cfmPasswordError })\n      isValid = false;\n    }\n    if (isValid) {\n      const emailForm = {\n        email: this.state.email\n      }\n      this.setState({\n        emailError: \"\",\n        passwordError: \"\",\n        nameError: \"\",\n        cfmPasswordError: \"\",\n      })\n      this.props.emailChecking(emailForm);\n    }\n  }\n\n  /**\n   * Register\n   * create form for fbid, email, password, name, usertype, tutgrp \n   * set loading state to true\n   * navigate to homepage\n   */\n  Register = () => {\n    const form = {\n      fbid: this.state.fbid,\n      email: this.state.email,\n      password: this.state.password,\n      name: this.state.name,\n      usertype: \"Student\",\n      tutgrp: this.state.tutgrp\n    }\n    this.setState({ loading: true });\n    this.props.registerUser(form);\n    this.props.Navigate('/')\n  }\n\n  /**\n   * componentDidupdate\n   * @param {*} prevProps \n   * @returns alert \"email used\" if the email has been used\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.email === this.props.email)\n      return\n    else if (this.props.email.length === 0)\n      this.Register()\n    else if (this.props.email.length !== 0)\n      alert(\"Email used\")\n\n  }\n  /**\n   * handleChange\n   * @param {*} e \n   */\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  /**\n   * RegisterForm\n   * @returns \n   */\n  render() {\n    const { loading } = this.state;\n    let fbimage = (!this.state.fbdetails) ? <React.Fragment /> : <center> <img width=\"150\" height=\"150\" src={this.state.fbimage} className=\"img-fluid z-depth-1 rounded-circle\" alt=\"\" /></center>\n    return (\n      <div id=\"classicformpage\">\n        <MDBView>\n          <MDBMask className=\"d-flex justify-content-center align-items-center gradient\">\n            <MDBContainer>\n              <MDBRow>\n                <MDBAnimation\n                  type=\"fadeInLeft\"\n                  delay=\".3s\"\n                  className=\"white-text text-center text-md-left col-md-6 mt-xl-5 mb-5\"\n                >\n                  <h1 className=\"h1-responsive font-weight-bold\">\n                    Thank you for joining us!\n                  </h1>\n                  <hr className=\"hr-light\" />\n                  <h6 className=\"mb-4\">\n                    Already have an account? Click the button below to go back\n                  </h6>\n                  <MDBNavLink to='/'>\n                    <MDBBtn outline color=\"white\">\n                      Login\n                  </MDBBtn>\n                  </MDBNavLink>\n                </MDBAnimation>\n\n                <MDBCol md=\"6\" xl=\"5\" className=\"mb-4\">\n                  <MDBAnimation type=\"fadeInRight\" delay=\".3s\">\n                    <MDBCard id=\"classic-card\">\n                      <MDBCardBody className=\"white-text\">\n                        <h3 className=\"text-center\">\n                          <MDBIcon icon=\"user\" /> Register:\n                        </h3>\n                        <hr className=\"hr-light\" />\n                        {fbimage}\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Enter Full Name\"\n                          icon=\"address-card\"\n                          id=\"name\"\n                          type=\"text\"\n                          value={this.state.name}\n                          onChange={this.handleChange}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.nameError}</div>\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Enter Email\"\n                          icon=\"envelope\"\n                          id=\"email\"\n                          type=\"email\"\n                          value={this.state.email}\n                          onChange={this.handleChange}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.emailError}</div>\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Enter Password\"\n                          icon=\"lock\"\n                          type=\"password\"\n                          id=\"password\"\n                          onChange={this.handleChange}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.passwordError}</div>\n                        <MDBInput\n                          className=\"white-text\"\n                          iconClass=\"white-text\"\n                          label=\"Confirm Password\"\n                          icon=\"lock\"\n                          type=\"password\"\n                          id=\"cfmpassword\"\n                          onChange={this.handleChange}\n                        />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.cfmPasswordError}</div>\n                        <select onChange={this.handleSelectList} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\n                          <option value={'TS1'}>TS1</option>\n                          <option value={'TS2'}>TS2</option>\n                          <option value={'TS3'}>TS3</option>\n                          <option value={'TS4'}>TS4</option>\n                        </select>\n                        <div className=\"text-center mt-4 black-text\">\n                          <MDBBtn onClick={this.Validate} color=\"white\" disabled={loading} >\n                            {loading && <span>Registering</span>}\n                            {!loading && <span>Register</span>}\n                          </MDBBtn>\n                          <FacebookLogin\n                            appId=\"892789337958489\"\n                            fields=\"name,email,picture\"\n                            cssClass=\"btn btn-outline white\"\n                            textButton=\"Facebook Register\"\n                            callback={this.responseFacebook}\n                          />\n                        </div>\n                      </MDBCardBody>\n                    </MDBCard>\n                  </MDBAnimation>\n                </MDBCol>\n              </MDBRow>\n            </MDBContainer>\n          </MDBMask>\n        </MDBView>\n      </div>\n    );\n  }\n}\n\nRegisterForm.propTypes = {\n  registerUser: PropTypes.func.isRequired,\n  emailChecking: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n  registerstatus: state.auth.status,\n  email: state.auth.emailcheck\n});\n\nexport default connect(mapStateToProps, { registerUser, emailChecking })(RegisterForm);","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport GuestNavbar from '../components/share/GuestNavBar'\nimport RegisterForm from '../components/registerpage/RegisterForm'\n\nclass Register extends Component {\n    /**\n     * Navigate\n     * @param {*} val \n     */\n    Navigate = (val) => {\n        this.props.history.push(val)\n    }\n    /**\n     * Register page\n     * @returns Register page\n     */\n    render() {\n        return (\n            <div>\n                <GuestNavbar />\n                <RegisterForm Navigate={this.Navigate} />\n                <Footer />\n            </div>\n        )\n    }\n}\nexport default Register","import React, { Component } from 'react';\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBLink } from 'mdbreact';\n\nclass TutorialTable extends Component {\n\n  /**\n   * state\n   * set default loading = false\n   */\n  state = {\n    loading: false\n  }\n  /**\n   * onDelete\n   * @param {*} tutid upon click, remove the tutid\n   */\n  onDelete = (tutid) => {\n    this.setState({ loading: !this.state.loading })\n    this.props.deleteTut(tutid);\n  }\n\n  /**\n   * View Tutorial\n   * @param {*} tutid upon click bring you to question page\n   */\n  ViewTutorial = (tutid) => {\n    this.props.navigate(tutid)\n  }\n\n  /**\n   * componentDidUpdate \n   * @param {*} prevProps if there is changes in tutorial, set loading = false \n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.tutorial !== this.props.tutorial) {\n      this.setState({ loading: false })\n    }\n  }\n  /**\n   * creation of new assignment\n   * @returns assignment name and tutorial grouping\n   */\n  render() {\n    return (\n      <MDBTable striped>\n        <MDBTableHead>\n          <tr>\n            <th>Assignment Name</th>\n            <th>Tutorial Group</th>\n            <th>Created by</th>\n            <th>Remove</th>\n            <th>View</th>\n          </tr>\n        </MDBTableHead>\n        <MDBTableBody>\n          {this.props.tutorial && this.props.tutorial.map(x => {\n            return (\n              <tr key={x.tutid}>\n                <td>{x.tutname}</td>\n                <td>{x.tutgrp}</td>\n                <td>{x.createdby}</td>\n                {(!this.state.loading) ? <td><MDBBtn size=\"sm\" color=\"red\" onClick={() => this.onDelete(x.tutid)}>Remove</MDBBtn></td> : <td><MDBBtn size=\"sm\" color=\"red\" disabled>Removing</MDBBtn></td>}\n                <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => this.ViewTutorial(x.tutid)} > View </MDBBtn>\n                </td>\n              </tr>\n            )\n          })}\n        </MDBTableBody>\n      </MDBTable>\n    )\n  }\n}\n\nexport default TutorialTable;","/**\n * Fetch addTutorial\n * @param {*} postData \n * @returns \n */\n\nexport const addTutorial = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/add/tutorial', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'ADD_TUTORIAL',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch deleteTutorial\n * @param {*} postData \n * @returns \n */\nexport const deleteTutorial = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/delete/tutorial', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'DELETE_TUTORIAL',\n            payload: data,\n            tutid: postData.tutid\n        })\n        );\n}\n\n/**\n * Fetch showTutorials\n * @returns \n */\nexport const showTutorials = () => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/tutlist')\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FETCH_TUTORIAL',\n            payload: data\n        })\n        );\n}\n/**\n * Fetch showUserTutorial\n * @param {*} postData \n * @returns \n */\nexport const showUserTutorial = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/user/tutlist', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FETCH_USER_TUTORIAL',\n            payload: data,\n        })\n        );\n}\n/**\n * Fetch showProfTutorial\n * @param {*} postData \n * @returns \n */\nexport const showProfTutorial = (postData) => dispatch => {\n    fetch('https://ssadapi.hyunatic.com/public/index.php/api/prof/tutlist', {\n        method: 'POST',\n        headers: {\n            'content-type': 'application/json'\n        },\n        body: JSON.stringify(postData)\n    })\n        .then(res => res.json())\n        .then(data => dispatch({\n            type: 'FETCH_PROF_TUTORIAL',\n            payload: data,\n        })\n        );\n}","import React, { Component } from 'react'\nimport { MDBInput, MDBBtn } from 'mdbreact';\n\nimport { connect } from 'react-redux'\nimport { addTutorial } from '../../Redux/Actions/TutorialAction'\n\nclass AddTutorial extends Component {\n\n  /**\n   * state\n   * set tutGroup to local storage tutgrp\n   * set createdby to local storage name\n   * set usertype to local storage usertype\n   * set coin to 50\n   * set tutName , nameError to \"\"\n   */\n    state = {\n        tutGroup: localStorage.getItem(\"tutgrp\"),\n        tutName: '',\n        createdby: localStorage.getItem(\"name\"),\n        coins: 50,\n        loading: false,\n        userType: localStorage.getItem(\"usertype\"),\n        nameError: \"\"\n    }\n/**\n * Validate if the string is empty\n * @returns false\n */\n    validate = () => {\n        let nameError = \"\";\n        if (!this.state.tutName) {\n            nameError = \"Assignment name cannot be empty\";\n            this.setState({nameError})\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * onSubmit \n     */\n    onSubmit = () => {\n        const post = {\n            tutname: this.state.tutName,\n            tutgrp: this.state.tutGroup,\n            createdby: this.state.createdby,\n            difficulty: this.state.difficulty,\n            coins: this.state.coins,\n\n        }\n        const isValid = this.validate();\n        if (isValid) {\n            this.setState({\n                loading: !this.state.loading,\n                tutName: \"\",\n                nameError:\"\"\n            })\n            this.props.addTut(post);\n        }\n    }\n\n/**\n * handlceChange\n * @param {*} e handle all the changes that were received\n */\n    handleChange = (e) => { //to handle change in inputs\n        this.setState({\n            [e.target.id]: e.target.value,\n        })\n    }\n\n   /**\n    * getValue\n    * @param {*} e  handle all the changes when the number of coins is amended\n    */\n    getValue = (e) => {\n        this.setState({\n            coins: e.target.value\n        })\n    }\n\n    /**\n     * handleSelectList\n     * @param {*} e  handle selection list\n     */\n    handleSelectList = (e) => {\n        this.setState({ difficulty: e.target.value })\n    }\n    /**\n     * handleTutList\n     * @param {*} e handle the tut list\n     */\n    handleTutList = (e) => {\n        this.setState({ tutGroup: e.target.value })\n    }\n\n    /**\n     * ComponentDidupdate\n     * @param {*} prevProps to check if there is any update from the previous props\n     */\n    componentDidUpdate(prevProps) {\n        if (prevProps.tutGroup !== this.props.tutGroup) {\n            this.setState({ loading: false })\n        }\n    }\n/**\n * Display all the assingment lists that are created\n * @returns \n */\n    render() {\n        const { loading } = this.state;\n        return (\n            <div>\n                <form>\n                    <div className=\"black-text\">\n                        <MDBInput value={this.state.tutName} label=\"Enter Assignment Name\" id='tutName' onChange={this.handleChange} icon=\"user-plus\" group type=\"text\" validate error=\"wrong\"\n                            success=\"right\" />\n                        <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.nameError}</div>\n                        {(this.state.userType === \"Professor\") &&\n                            <React.Fragment>\n                                <label htmlFor=\"difficulty\">Select Tutorial Group</label>\n                                <select onChange={this.handleTutList} value={this.state.tutGroup} id=\"tutGroup\" className=\"browser-default custom-select\">\n                                    <option value={'TS1'}>TS1</option>\n                                    <option value={'TS2'}>TS2</option>\n                                    <option value={'TS3'}>TS3</option>\n                                    <option value={'TS4'}>TS4</option>\n                                </select>\n                            </React.Fragment>}\n                    </div>\n                    <label htmlFor=\"coins\">Number of coins: {this.state.coins}</label>\n                    <input type=\"range\" id=\"coins\" onChange={this.getValue} min=\"0\" max=\"100\" className=\"custom-range\" />\n                    <div className=\"text-center\">\n                        <MDBBtn onClick={this.onSubmit} color=\"blue\" disabled={loading} >\n                            {loading && <span>Submitting</span>}\n                            {!loading && <span>Submit</span>}</MDBBtn>\n                        <MDBBtn color=\"red\" onClick={this.props.onBack}> Back\n                       </MDBBtn>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    tutGroup: state.tutorial.tutorialgrp\n});\n\nexport default connect(mapStateToProps, { addTutorial })(AddTutorial) //to be changed","\nimport React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBAnimation } from \"mdbreact\";\nimport TutorialTable from '../components/assignmentpage/TutorialTable'\nimport AddTutorial from '../components/assignmentpage/AddTutorial'\n\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { showTutorials, deleteTutorial, addTutorial, showProfTutorial } from '../Redux/Actions/TutorialAction'\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\n\nclass Assignment extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set name to local storage name\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        name: localStorage.getItem(\"name\"),\n    }\n    componentDidMount() {\n        //this.props.showAllTutorials();\n        this.GetTutorials()\n    }\n    /**\n     * GetTutorials\n     * set a const form tut grp and name\n     */\n    GetTutorials = () => {\n        const form = {\n            tutgrp: this.state.tutgrp,\n            name: this.state.name\n        }\n        this.props.showProfTutorial(form);\n        \n    }\n    /**\n     * Navigate\n     * @param {*} tutid navigate to questions page \n     */\n    Navigate = (tutid) => {\n        this.props.history.push('/question/' + tutid)\n    }\n\n    /**\n     * DelTutorial\n     * @param {*} tutid Deletion of tutorial\n     */\n    DelTutorial = (tutid) => {\n        const form = {\n            tutid: tutid\n        }\n        this.props.deleteTutorial(form)\n    }\n    /**\n     * NotLoggedIn \n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * AddTutorial\n     * @param {*} form \n     */\n    AddTutorial = (form) => {\n        //Submit data to my api\n        this.props.addTutorial(form);\n    }\n    /**\n     * Onback\n     * navigate to home\n     */\n    OnBack = () => {\n        this.props.history.push('/home')\n    }\n    /**\n     * Assignment page\n     * @returns Assignemnt page\n     */\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <br />\n                    \n                        <MDBRow >\n                            <MDBCol>\n                            <MDBAnimation type=\"slideInDown\" >\n                                <h2>Assignment List</h2>\n                                <hr />\n                                <TutorialTable deleteTut={this.DelTutorial} navigate={this.Navigate} tutorial={this.props.tutorialtable} />\n                                </MDBAnimation>\n                                <MDBAnimation type=\"slideInUp\">\n                                <br />\n                                <h3>Assignment Creation</h3>\n                                <hr />\n                                <AddTutorial addTut={this.AddTutorial} onBack={this.OnBack} />\n                                </MDBAnimation>\n                            </MDBCol>\n                        </MDBRow>\n                   \n                </MDBContainer>\n                <br/><br/><br/><br/>\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\n\nAssignment.propTypes = {\n    showTutorials: PropTypes.func.isRequired,\n    deleteTutorial: PropTypes.func.isRequired,\n    addTutorial: PropTypes.func.isRequired,\n    showProfTutorial: PropTypes.func.isRequired\n}\n\n//This is from the Reducers\n//state.Rootreducer.TutorialReducers\nconst mapStateToProps = state => ({\n    tutorialtable: state.tutorial.tutorialgrp,\n});\n\n// connection this component to database.\nexport default connect(mapStateToProps, { showProfTutorial, showTutorials, deleteTutorial, addTutorial })(Assignment)","import React, { Component } from 'react'\n\nexport default class Logout extends Component {\n    componentDidMount(){\n        localStorage.clear()\n        this.props.history.push('/')\n    }\n\n    /**\n     * Logout page\n     * @returns Logout page\n     */\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\nconst StudentInfo = ({ student }) => {\n  /**\n   * Studentinfo\n   */\n  return (\n    <div>\n      {student && student.map(x => {\n        return (\n          <MDBCard key={x.id} style={{ width: \"22rem\" }}>\n            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\n            <MDBCardBody>\n              <MDBCardTitle>{x.name}</MDBCardTitle>\n              <MDBCardText>\n                Email: {x.email} <br />\n                Tutorial Group: {x.tutgrp}\n              </MDBCardText>\n            </MDBCardBody>\n          </MDBCard>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default StudentInfo;","import React from \"react\";\nimport { MDBInput, MDBBtn } from 'mdbreact';\n\nconst MarkScoreComment = ({ record, inputChange, markComplete, goBack, scoreError, commentError }) => {\n  /**\n   * MarkScoreComment\n   */\n  return (\n    <div>\n      {record.map(x => {\n        return (\n          <form key={x.id}>\n            <div className=\"grey-text\">\n              <MDBInput label=\"Score\" placeholder=\"Enter Score\" id=\"score\" onChange={inputChange} className=\"w-100\" icon=\"star\" group type=\"email\" validate error=\"wrong\"\n                success=\"right\" />\n              <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {console.log(scoreError)}</div>\n              <MDBInput label=\"Comment\" placeholder=\"Enter Comments\" id=\"comment\" onChange={inputChange} className=\"w-100\" icon=\"comment\" group type=\"email\" validate error=\"wrong\"\n                success=\"right\" />\n              <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {commentError}</div>\n            </div>\n            <div className=\"text-center\">\n              <MDBBtn color=\"blue\" onClick={markComplete}>Submit</MDBBtn>\n              <MDBBtn color=\"red\" onClick={goBack} > Back</MDBBtn>\n            </div>\n\n          </form>\n        )\n      })\n      }\n    </div>\n  );\n};\n\nexport default MarkScoreComment;","import React from 'react';\n\nimport { MDBRow, MDBCol, MDBContainer } from \"mdbreact\";\n\nconst MarkPicture = ({ record }) => {\n  /**\n   * MarkPicture\n   */\n  return (\n    <div>\n      {record.map(x => {\n        return (\n          <MDBRow key={x.id}>\n            <MDBCol md=\"12\" className=\"mb-3\">\n              <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\n            </MDBCol>\n          </MDBRow>\n        )\n      })\n      }\n    </div>\n\n  )\n}\n\nexport default MarkPicture;","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\";\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\nimport { getStudentSubmission, updateScores } from '../Redux/Actions/GameActions'\nimport { showTutorialQuestion } from '../Redux/Actions/QuestActions'\nimport { getStudentInfo } from '../Redux/Actions/AuthAction'\nimport StudentInfo from '../components/marking/StudentInfo';\nimport MarkDropDown from '../components/marking/MarkDropDown';\nimport MarkScoreComment from '../components/marking/MarkScoreComment';\nimport MarkPicture from '../components/marking/MarkPicture'\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\n\n\nclass Marking extends Component {\n    /**\n     * state \n     * submissionid : id\n     * studid : studid\n     * set tutid to local storage selectedtutid\n     * set score, comment, scoreError, commentError to \"\"\n     */\n    state = {\n        submissionid: this.props.match.params.id,\n        tutid: localStorage.getItem(\"selectedtutid\"),\n        studid: this.props.match.params.studid,\n        score: '',\n        comment: '',\n        scoreError:\"\",\n        commentError:\"\"\n    }\n    componentDidMount() {\n        this.getStudentDetails();\n        this.getSubmission();\n        this.getTutorialQuestions();\n    }\n    /**\n     * NotloggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * getSubmssion\n     */\n    getSubmission() {\n        const form = {\n            id: this.state.submissionid,\n        }\n        this.props.getStudentSubmission(form)\n    }\n    /**\n     * getTutorialQuestions\n     */\n    getTutorialQuestions() {\n        const form = {\n            tutid: this.state.tutid\n        }\n        this.props.showTutorialQuestion(form)\n    }\n\n    /**\n     * getStudentDetails\n     */\n    getStudentDetails() {\n        const form = {\n            id: this.state.studid\n        }\n        this.props.getStudentInfo(form)\n    }\n\n    /**\n     * handleChange\n     * @param {*} e handle all the changes that were received\n     */\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    /**\n     * Validate\n     * @returns errorhandling when field is empty \n     */\n    validate = () => {\n        let scoreError= \"\";\n        let commentError = \"\";\n\n        if (!this.state.score){\n            scoreError= \"Score cannot be empty\";\n        }\n        else{\n            if (!Number(this.state.score)){\n                scoreError = \"Score must be a numerical value\";\n            }\n        }\n        if (!this.state.comment){\n            commentError= \"Comment cannot be empty\";\n        }\n        if (commentError || scoreError){\n            this.setState({commentError,scoreError});\n            return false\n        }\n        return true;\n    }\n\n    /**\n     * MarkingComplete\n     */\n    MarkingComplete = () => {\n        const form = {\n            id: this.state.submissionid,\n            score: this.state.score,\n            comment: this.state.comment\n        }\n        const isValid = this.validate();\n        console.log(isValid, this.state.commentError,this.state.scoreError);\n        if (isValid){\n            this.setState({scoreError: \"\",commentError: \"\"})\n            this.props.updateScores(form)\n            this.props.history.push(\"/seltut\")\n        }        \n    }\n/**\n * GoBack\n */\n    GoBack = () => {\n        this.props.history.push(\"/seltut\")\n    }\n    /**\n     * Marking page\n     * @returns Marking page\n     */\n    render() {\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <br />\n\n                    <MDBAnimation type=\"slideInDown\">\n                        <MDBRow>\n                            <MDBCol size=\"6\">\n                                <h2>Student Details</h2>\n                                <hr />\n                                <StudentInfo student={this.props.student} />\n                            </MDBCol>\n                            <MDBCol size=\"6\">\n                                <h2>Student's Answer</h2>\n                                <hr />\n                                <MarkPicture record={this.props.record} />\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBAnimation>\n\n                    <MDBAnimation type=\"slideInUp\">\n                        <MDBRow>\n                            <MDBCol size=\"12\">\n                                <br />\n                                <h2>Marking</h2>\n                                <hr/>\n                                <MarkScoreComment scoreError = {this.state.scoreError} commentError = {this.state.commentError} markComplete={this.MarkingComplete} goBack={this.GoBack} inputChange={this.handleChange} record={this.props.record} />\n                                \n                            </MDBCol>\n                        </MDBRow>\n                    </MDBAnimation>\n                </MDBContainer>\n                <br/><br/><br/>\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\n\nMarking.Proptypes = {\n    getStudentSubmission: Proptypes.func.isRequired,\n    showTutorialQuestion: Proptypes.func.isRequired,\n    getStudentInfo: Proptypes.func.isRequired,\n    updateScores: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    record: state.game.submission,\n    questionlist: state.quest.questions,\n    student: state.auth.studentinfo,\n    scores: state.game.status\n})\nexport default connect(mapStateToProps, { getStudentSubmission, showTutorialQuestion, getStudentInfo, updateScores })(Marking)","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBContainer, MDBRow, MDBCol, MDBAnimation } from 'mdbreact';\nimport { showTutorials, showUserTutorial } from '../Redux/Actions/TutorialAction'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\n\nclass MarkingHome extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\")\n    }\n    componentDidMount() {\n        //this.props.showAllTutorials();\n        this.GetTutorials()\n    }\n    /**\n     * getTutorials\n     */\n    GetTutorials = () => {\n        const form = {\n            tutgrp: this.state.tutgrp\n        }\n        this.props.showUserTutorial(form);\n    }\n/**\n * GoBack\n * navigate to home\n */\n    GoBack = () => { this.props.history.push('/home') }\n/**\n * NotLoggedIn\n */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n\n    /**\n     * ViewTutorial\n     * @param {*} tutid \n     */\n    ViewTutorial = (tutid) => {\n        var tutgrp = this.props.tutorialtable.filter(x => x.tutid == tutid).map(z => z.tutgrp)\n        localStorage.setItem(\"seltutgrp\", tutgrp)\n        localStorage.setItem(\"selectedtutid\", tutid)\n        this.props.history.push('/student/' + tutid)\n    }\n\n    /**\n     * MarkingHome page\n     * @returns MarkingHome page\n     */\n    render() {\n        let tutorialgrp = this.props.tutorialtable.map(x => {\n            return (\n                <tr key={x.tutid}>\n                    <td>{x.tutname}</td>\n                    <td>{x.tutgrp}</td>\n                    <td>{x.createdby}</td>\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.ViewTutorial(x.tutid)}> Select </MDBBtn></td>\n                </tr>\n            )\n        })\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <br />\n                    <MDBAnimation type=\"slideInUp\">\n                        <MDBRow>\n                            <MDBCol size=\"12\">\n                                <h2>Select Assignment to Mark</h2>\n                                <hr />\n                                <MDBTable striped>\n                                    <MDBTableHead>\n                                        <tr>\n                                            <th>Assignment Name</th>\n                                            <th>Tutorial Group</th>\n                                            <th>Created by</th>\n                                            <th>Select</th>\n                                        </tr>\n                                    </MDBTableHead>\n                                    <MDBTableBody>\n                                        {tutorialgrp}\n                                    </MDBTableBody>\n                                </MDBTable>\n                            </MDBCol>\n                        </MDBRow>\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\n                       </MDBBtn>\n                    </MDBAnimation>\n                </MDBContainer>\n\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\nMarkingHome.propTypes = {\n    showTutorials: PropTypes.func.isRequired,\n    showUserTutorial: PropTypes.func.isRequired\n}\n\n//This is from the Reducers\n//state.Rootreducer.TutorialReducers\nconst mapStateToProps = state => ({\n    tutorialtable: state.tutorial.tutorialgrp,\n});\n\nexport default connect(mapStateToProps, { showTutorials, showUserTutorial })(MarkingHome)","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn, MDBContainer, MDBRow, MDBCol, MDBAnimation } from 'mdbreact';\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { getStudents } from '../Redux/Actions/GameActions'\nimport Navbar from '../components/share/Navbar';\nimport Footer from '../components/share/Footer';\n\nclass StudentSelect extends Component {\n    /**\n     * state\n     * set tutgrp to local storage selTutgrp\n     * tutid : tutid\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"seltutgrp\"),\n        tutid: this.props.match.params.tutid\n    }\n    componentDidMount() {\n        this.getStudents()\n    }\n    /**\n     * getStudents\n     */\n    getStudents() {\n        const form = {\n            tutid: this.state.tutid\n        }\n        this.props.getStudents(form)\n    }\n    /**\n     * ViewDetails\n     * @param {*} submissionid \n     * @param {*} studid \n     */\n    ViewDetails = (submissionid, studid) => {\n        this.props.history.push('/marking/' + submissionid + \"/\" + studid)\n    }\n    /**\n     * GoBack\n     * navigate to seltut\n     */\n    GoBack = () => { this.props.history.push('/seltut') }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * StudentSelect page\n     * @returns StudentSelect page\n     */\n    render() {\n        let studentlist = this.props.students.map(x => {\n            return (\n                <tr key={x.id}>\n                    <td>{x.name}</td>\n                    <td>{x.date}</td>\n                    <td>{x.tutgrp}</td>\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.ViewDetails(x.id, x.studid)}> Select </MDBBtn></td>\n                </tr>\n            );\n        })\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <br />\n                    <MDBAnimation type=\"slideInDown\" >\n                        <MDBRow>\n                            <MDBCol size=\"12\">\n                                <h2>Select Student to Mark from Group: {this.state.tutgrp}</h2>\n                                <hr />\n                                <MDBTable striped>\n                                    <MDBTableHead>\n                                        <tr>\n                                            <th>Student Name</th>\n                                            <th>Date Submitted</th>\n                                            <th>Tutorial Group</th>\n                                            <th>Select</th>\n                                        </tr>\n                                    </MDBTableHead>\n                                    <MDBTableBody>\n                                        {studentlist}\n                                    </MDBTableBody>\n                                </MDBTable>\n                            </MDBCol>\n                        </MDBRow>\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\n                       </MDBBtn>\n                    </MDBAnimation>\n                </MDBContainer>\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\nStudentSelect.propTypes = {\n    getStudents: PropTypes.func.isRequired,\n}\n\n//This is from the Reducers\n//state.Rootreducer.TutorialReducers\nconst mapStateToProps = state => ({\n    students: state.game.studentlist,\n});\nexport default connect(mapStateToProps, { getStudents })(StudentSelect)","import React, { Component } from 'react';\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\nclass StudentSubmit extends Component {\n  /**\n   * onselect\n   * @param {*} ldrid \n   */\n  onSelect = (ldrid) => {\n    this.props.selectSubmission(ldrid)\n  }\n\n  /**\n   * StudentSubmit\n   * @returns StudentSubmit\n   */\n  render() {\n    return (\n      <MDBTable>\n        <MDBTableHead>\n          <tr>\n            <th>Name</th>\n            <th>Tutorial Name</th>\n            <th>Date</th>\n            <th>Score</th>\n            <th>View</th>\n          </tr>\n        </MDBTableHead>\n        <MDBTableBody>\n          {this.props.mycompletedtask && this.props.mycompletedtask.map(x => {\n            return (\n              <tr key={x.studid}>\n                <td>{x.name}</td>\n                <td>{x.tutname}</td>\n                <td>{x.date}</td>\n                <td>{x.score}</td>\n                <td><MDBBtn color=\"green\" onClick={() => this.onSelect(x.id)} size=\"sm\">View</MDBBtn></td>\n              </tr>\n            )\n          })}\n        </MDBTableBody>\n      </MDBTable>\n    )\n  }\n}\n\nexport default StudentSubmit;","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation } from \"mdbreact\"\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\nimport { fetchLeaderboard, myCompletedTutorial } from '../Redux/Actions/GameActions'\nimport LeaderBoard from '../components/homepage/LeaderBoard'\nimport StudentSubmit from '../components/studentmainpage/StudentSubmit'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\n\n\nclass StudentMain extends Component {\n    /**\n     * state\n     * set studid to local storage studid\n     * set tutgrp to local storage tutgrp\n     */\n    state = {\n        studid: localStorage.getItem(\"studid\"),\n        tutgrp: localStorage.getItem(\"tutgrp\")\n    }\n    componentDidMount() {\n        this.props.fetchLeaderboard();\n        this.props.fetchPosts();\n        this.getStudentSubmission()\n    }\n    /**\n     * getStudentSubmission\n     */\n    getStudentSubmission() {\n        const form = {\n            studid: this.state.studid\n        }\n        this.props.myCompletedTutorial(form);\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * ViewMySubmission\n     * @param {*} ldrid \n     */\n    viewMySubmission = (ldrid) => {\n        this.props.history.push('/submission/' + ldrid)\n    }\n    /**\n     * StudentMain Page\n     * @returns StudentMain page\n     */\n    render() {\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n\n                <MDBContainer>\n                    <MDBAnimation type=\"slideInDown\" count={1}>\n                        <br />\n                        <h2>Leader Board</h2>\n                        <hr />\n                        {this.props.leaderboard && <LeaderBoard leaderboard={this.props.leaderboard} tutgrp={this.state.tutgrp} />}\n                    </MDBAnimation>\n                    <MDBAnimation type=\"slideInUp\" count={1}>\n                        <br />\n\n                        <h2>Personal Submission</h2>\n                        <StudentSubmit selectSubmission={this.viewMySubmission} mycompletedtask={this.props.mycompletedtask} />\n                    </MDBAnimation>\n                </MDBContainer>\n                <br/><br/><br/>\n                <Footer />\n            </div>\n        )\n    }\n}\nStudentMain.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    fetchLeaderboard: PropTypes.func.isRequired,\n    myCompletedTutorial: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    twitter: state.twitter.items,\n    leaderboard: state.game.records,\n    mycompletedtask: state.game.completedtut\n});\n\nexport default connect(mapStateToProps, { fetchPosts, fetchLeaderboard, myCompletedTutorial })(StudentMain)\n","import React, { Component } from 'react'\nimport { MDBInputGroup, MDBBtn } from 'mdbreact';\n\nexport default class Uploadfile extends Component {\n/**\n * state\n */\n    state = {\n        form: {\n            file: []\n        }\n    }\n\n    /**\n     * onChangeHandlefile\n     * @param {*} e \n     */\n    onChangeHandleFile = (e) => {\n        console.log(e.target.files[0])\n        var file = e.target.files[0];\n        var reader = new FileReader();\n\n        reader.readAsDataURL(file);\n        reader.addEventListener(\"load\", () => {\n                this.setState(state => ({\n                    ...state,\n                    form: {\n                        file: [reader.result]\n                    }\n                }));\n                const url = reader.result;\n                //console.log(\"#####\", url);\n                //Call Parent Component Method\n                this.props.picUpload(url)\n            },\n            false\n        );\n    };\n\n/**\n * uploadfile\n * @returns uploadfile\n */\n    render() {\n        return (\n            <MDBInputGroup id='file'\n                inputs={\n                    <div className=\"custom-file\">\n                        <input onChange={this.onChangeHandleFile}\n                            type=\"file\"\n                            className=\"custom-file-input\"\n                            id=\"inputGroupFile01\"\n                        />\n                        <label className=\"custom-file-label\" htmlFor=\"inputGroupFile01\">\n                            Choose file\n                        </label>\n                    </div>\n                }\n                containerClassName=\"mb-3\"\n            />\n        )\n    }\n}\n","import React from 'react';\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\nconst StudentProfileCard = ({ studname, profilepic, studemail, studtutgrp }) => {\n  /**\n   * StudentProfileCard\n   */\n  return (\n    <div>\n      <MDBCard style={{ width: \"22rem\" }}>\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\n        <MDBCardBody>\n          <MDBCardTitle>{studname}</MDBCardTitle>\n          <MDBCardText>\n            Email: {studemail} <br />\n                Tutorial Group: {studtutgrp}\n          </MDBCardText>\n        </MDBCardBody>\n      </MDBCard>\n    </div>\n  )\n}\n\nexport default StudentProfileCard;","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation } from \"mdbreact\"\nimport Uploadfile from '../components/share/Uploadfile'\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\nimport { getStudentInfo, updateProfile, facebookAccountLink } from '../Redux/Actions/AuthAction'\nimport { showTutorials } from '../Redux/Actions/TutorialAction'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\nimport FacebookLogin from 'react-facebook-login'\nimport StudentProfileCard from '../components/studentprofile/StudentProfileCard'\n\nclass StudentProfile extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set studid to local storage studid\n     * set email to local storage email\n     * set picture to local storage picture\n     * set name to local storage name\n     * set fbid to local storage fbid\n     * set fbDisplay to false\n     * set emailError to \"\"\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        studid: localStorage.getItem(\"studid\"),\n        email: localStorage.getItem(\"email\"),\n        picture: localStorage.getItem(\"picture\"),\n        name: localStorage.getItem(\"name\"),\n        fbid: localStorage.getItem(\"fbid\"),\n        fbDisplay: false,\n        emailError:\"\"\n    }\n\n    componentDidMount() {\n        if (this.state.fbid == '') {\n            this.setState({ fbDisplay: true })\n        }\n        this.getStudentDetails();\n        this.props.showTutorials();\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * getStudentDetails\n     */\n    getStudentDetails() {\n        const form = {\n            id: this.state.studid\n        }\n        this.props.getStudentInfo(form)\n    }\n\n    /**\n     * onChoose\n     * @param {*} e \n     */\n    onChoose = (e) => {\n        this.setState({\n            tutgrp: e.target.value\n        });\n    }\n    /**\n     * validate\n     * @returns error handling \n     */\n    validate = () =>{\n        let emailError = \"\";\n        if (!this.state.email){\n            emailError= \"Email cannot be empty\";\n            this.setState({emailError});\n            return false;\n        }\n        return true;\n    }\n    /**\n     * onSubmitAll\n     */\n    onSubmitAll = () => {\n        const form = {\n            id: this.state.studid,\n            name: this.state.name,\n            fbid: this.state.fbid,\n            email: this.state.email,\n            picture: this.state.picture,\n            tutgrp: this.state.tutgrp\n        }\n        const isValid = this.validate();\n\n        if (isValid) {\n            this.setState({emailError:\"\"})\n            this.props.updateProfile(form);\n            localStorage.setItem(\"picture\", this.state.picture)\n            localStorage.setItem(\"tutgrp\", this.state.tutgrp)\n            localStorage.setItem(\"email\", this.state.email)\n            localStorage.setItem(\"name\", this.state.name)\n            localStorage.setItem(\"fbid\", this.state.fbid)\n            this.props.history.push(\"/home\")\n        }\n    }\n    /**\n     * handleChange\n     * @param {*} e handle all the changes that were received\n     */\n    handleChange = (e) => { // to change state everytime you type -- question: value\n        this.setState({\n            [e.target.id]: e.target.value,\n        })\n    }\n    /**\n     * PictureUpload\n     * @param {*} pic \n     */\n    PictureUploaded = (pic) => {\n        console.log(pic)\n        this.setState({ picture: pic });\n    }\n    /**\n     * responseFacebook\n     * @param {*} response \n     */\n    responseFacebook = (response) => {\n        this.setState({\n            fbid: response.id,\n            fblogin: true\n        })\n        this.FbLink(response.id)\n    }\n    /**\n     * FbLink\n     * @param {*} id \n     */\n    FbLink = (id) => {\n        this.setState({\n            fbid: id,\n            fbDisplay: false\n        })\n        localStorage.setItem(\"fbid\", this.state.fbid)\n        const form = {\n            id: this.state.studid,\n            fbid: this.state.fbid\n        }\n        this.props.facebookAccountLink(form)\n    }\n    /**\n     * GoBack \n     * navigate to studentmain\n     */\n    GoBack = () => { this.props.history.push('/studentmain') }\n\n    /**\n     * Student Profile page\n     * @returns Student Profile page\n     */\n    render() {\n        let facebookBtn = (this.state.fbDisplay) ? <FacebookLogin appId=\"892789337958489\"\n            textButton=\"Link with Facebook\"\n            fields=\"name,email,picture\"\n            cssClass=\"btn btn-sm blue white-text\"\n            callback={this.responseFacebook}\n        /> : <React.Fragment> You have successfully linked your account with facebook </React.Fragment>\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol size=\"5\">\n                            <MDBAnimation type=\"slideInLeft\">\n                                <div>\n                                    <h3>Live Preview</h3>\n                                    <hr />\n                                    {/* The pic will take very long to load */}\n                                    <StudentProfileCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\n                                </div>\n                            </MDBAnimation>\n                        </MDBCol>\n                        <MDBCol size=\"7\">\n                        <MDBAnimation type=\"slideInRight\">\n                            <h3>Update Profile</h3>\n                            <hr />\n                            <MDBInput id='name' value={this.state.name} label=\"Full Name\" icon=\"user\" disabled onChange={this.handleChange} >\n                            </MDBInput>\n                            <MDBInput id='email' value={this.state.email} label=\"E-mail address\" icon=\"envelope\" onChange={this.handleChange} >\n                            </MDBInput>\n                            <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.emailError}</div>\n                            <Uploadfile picUpload={this.PictureUploaded} />\n                            <select onChange={this.onChoose} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\n                                <option value={'TS1'}>TS1</option>\n                                <option value={'TS2'}>TS2</option>\n                                <option value={'TS3'}>TS3</option>\n                                <option value={'TS4'}>TS4</option>\n                            </select>\n                            <br /> <br />\n                            {facebookBtn}\n                            <br />\n                            <MDBBtn\n                                onClick={this.onSubmitAll}\n                                color=\"blue\"\n                                className=\"m-0 px-3 py-2 z-depth-0\">\n                                Update Profile\n                            </MDBBtn>\n                            <br />\n                            <br />\n                            <MDBBtn\n                                onClick={this.GoBack}\n                                color=\"red\"\n                                className=\"m-0 px-3 py-2 z-depth-0\">\n                                Back\n                            </MDBBtn>\n                            </MDBAnimation>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <br />\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\nStudentProfile.Proptypes = {\n    getStudentInfo: Proptypes.func.isRequired,\n    showTutorials: Proptypes.func.isRequired,\n    facebookAccountLink: Proptypes.func.isRequired,\n    updateProfile: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    student: state.auth.studentinfo,\n    allTutorials: state.tutorial.tutorialgrp,\n\n})\nexport default connect(mapStateToProps, { getStudentInfo, showTutorials, updateProfile, facebookAccountLink })(StudentProfile)\n","import React from 'react';\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\nconst ProfProfileCard = ({ studname, profilepic, studemail, studtutgrp }) => {\n  /**\n   * ProfProfileCard\n   */\n  return (\n    <div>\n      <MDBCard style={{ width: \"22rem\" }}>\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\n        <MDBCardBody>\n          <MDBCardTitle>{studname}</MDBCardTitle>\n          <MDBCardText>\n            Email: {studemail} <br />\n                Tutorial Group: {studtutgrp}\n          </MDBCardText>\n        </MDBCardBody>\n      </MDBCard>\n    </div>\n  )\n}\n\nexport default ProfProfileCard;","import React, { Component } from 'react'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation } from \"mdbreact\"\nimport Uploadfile from '../components/share/Uploadfile'\nimport StudentInfo from '../components/marking/StudentInfo'\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\nimport { getProfInfo, updateProfile, facebookAccountLink } from '../Redux/Actions/AuthAction'\nimport { showTutorials } from '../Redux/Actions/TutorialAction'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\nimport FacebookLogin from 'react-facebook-login'\nimport ProfProfileCard from '../components/profprofile/ProfProfileCard'\n\nclass ProfessorProfile extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set studid to local storage studid\n     * set email to local storage email\n     * set picture to local storage picture\n     * set name to local storage name\n     * set fbid to local storage fbid\n     * set fbDisplay to false\n     * set emailError to \"\"\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        studid: localStorage.getItem(\"studid\"),\n        email: localStorage.getItem(\"email\"),\n        picture: localStorage.getItem(\"picture\"),\n        name: localStorage.getItem(\"name\"),\n        fbid: localStorage.getItem(\"fbid\"),\n        fbDisplay: false,\n        emailError:\"\",\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    componentDidMount() {\n        if (this.state.fbid == '') {\n            this.setState({ fbDisplay: true })\n        }\n        this.getProfDetails();\n        this.props.showTutorials();\n    }\n/**\n * getProfDetails\n */\n    getProfDetails() {\n        const form = {\n            id: this.state.studid\n        }\n        this.props.getProfInfo(form)\n    }\n/**\n * onChoose\n */\n    onChoose = (e) => {\n        this.setState({\n            tutgrp: e.target.value\n        });\n    }\n/**\n * validate\n * Error handling when field is empty\n */\n    validate = () => {\n        let emailError = \"\";\n        if (!this.state.email){\n            emailError = \"Email cannot be empty\";\n        }\n        else {\n            if (!this.state.email.includes('@')){\n                emailError = \"Invalid email\";\n            }\n        }\n        if (emailError){\n            this.setState({emailError});\n            return false;\n        }\n        return true;\n    }\n/**\n * onSubmitAll\n */\n    onSubmitAll = () => {\n        const form = {\n            id: this.state.studid,\n            name: this.state.name,\n            fbid: this.state.fbid,\n            email: this.state.email,\n            picture: this.state.picture,\n            tutgrp: this.state.tutgrp\n        }\n        const isValid = this.validate();\n\n        if (isValid){\n            this.setState({emailError: \"\"})\n            this.props.updateProfile(form);\n            localStorage.setItem(\"picture\", this.state.picture)\n            localStorage.setItem(\"tutgrp\", this.state.tutgrp)\n            localStorage.setItem(\"email\", this.state.email)\n            localStorage.setItem(\"name\", this.state.name)\n            localStorage.setItem(\"fbid\", this.state.fbid)\n            this.props.history.push(\"/home\")\n        }\n        \n    }\n/**\n * GoBack\n * navigate to home\n */\n    GoBack = ()=> { this.props.history.push(\"/home\")}\n\n    /**\n     * handleChange\n     * @param {*} e  handle all the changes that were received\n     */\n    handleChange = (e) => { // to change state everytime you type -- question: value\n        this.setState({\n            [e.target.id]: e.target.value,\n        })\n    }\n    /**\n     * PictureUpload\n     * @param {*} pic \n     */\n    PictureUploaded = (pic) => {\n        console.log(pic)\n        this.setState({ picture: pic });\n    }\n\n    /**\n     * responseFacebook\n     * @param {*} response \n     */\n    responseFacebook = (response) => {\n        this.setState({\n            fbid: response.id,\n            fblogin: true\n        })\n        this.FbLink(response.id)\n    }\n    /**\n     * FbLink\n     * @param {*} id \n     */\n    FbLink = (id) => {\n        this.setState({\n            fbid: id,\n            fbDisplay: false\n        })\n        localStorage.setItem(\"fbid\", this.state.fbid)\n        const form = {\n            id: this.state.studid,\n            fbid: this.state.fbid\n        }\n        this.props.facebookAccountLink(form)\n    }\n\n    /**\n     * Professor Profile page\n     * @returns Professor Profile page\n     */\n    render() {\n        let facebookBtn = (this.state.fbDisplay) ? <FacebookLogin appId=\"892789337958489\"\n            textButton=\"Link with Facebook\"\n            fields=\"name,email,picture\"\n            cssClass=\"btn btn-sm blue white-text\"\n            callback={this.responseFacebook}\n        /> : <React.Fragment> You have successfully linked your account with facebook </React.Fragment>\n        return (\n            <React.Fragment>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n                        \n                        <MDBCol size=\"5\" lg = \"5\" sm = \"12\" >\n                        <MDBAnimation type=\"slideInLeft\">\n                            <div>\n                                <h3>Live Preview</h3>\n                                <hr />\n                                {/* The pic will take very long to load */}\n                                <ProfProfileCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\n                            </div>\n                            </MDBAnimation>\n                        </MDBCol>\n                        \n                        \n                        <MDBCol  size=\"7\" lg = \"7\" sm = \"12\">\n                        <MDBAnimation type=\"slideInRight\">\n                            <h3>Update Profile</h3>\n                            <hr />\n                            <MDBInput id='name' value={this.state.name} label=\"Full Name\" icon=\"user\" onChange={this.handleChange} >\n                            </MDBInput>\n                            <MDBInput id='email' value={this.state.email} label=\"E-mail address\" icon=\"envelope\" onChange={this.handleChange} >\n                            </MDBInput>\n                            <div style = {{fontSize: 15, color:\"rgb(255, 61, 61)\"}} > {this.state.emailError} </div>\n                            <Uploadfile picUpload={this.PictureUploaded} />\n                            <select onChange={this.onChoose} value={this.state.tutgrp} id=\"tutgrp\" className=\"browser-default custom-select\">\n                                <option value={'TS1'}>TS1</option>\n                                <option value={'TS2'}>TS2</option>\n                                <option value={'TS3'}>TS3</option>\n                                <option value={'TS4'}>TS4</option>\n                            </select>\n                            <br /> <br />\n                            {facebookBtn}\n                            <br />\n                            <MDBBtn\n                                onClick={this.onSubmitAll}\n                                color=\"blue\"\n                                className=\"m-0 px-3 py-2 z-depth-0\">\n                                Update Profile\n                            </MDBBtn>\n                            <br />\n                            <br />\n                            <MDBBtn\n                                onClick={this.GoBack}\n                                color=\"red\"\n                                className=\"m-0 px-3 py-2 z-depth-0\">\n                                Back\n                            </MDBBtn>\n                            </MDBAnimation>\n                        </MDBCol>\n                        \n                    </MDBRow>\n                </MDBContainer>\n                <br />\n                <Footer />\n            </React.Fragment>\n        )\n    }\n}\nProfessorProfile.Proptypes = {\n    getProfInfo: Proptypes.func.isRequired,\n    showTutorials: Proptypes.func.isRequired,\n    facebookAccountLink: Proptypes.func.isRequired,\n    updateProfile: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    student: state.auth.profinfo,\n    allTutorials: state.tutorial.tutorialgrp,\n\n})\nexport default connect(mapStateToProps, { getProfInfo, showTutorials, updateProfile, facebookAccountLink })(ProfessorProfile)\n","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport PropTypes from 'prop-types'\nimport { fetchPosts } from '../Redux/Actions/TwitterAction'\nimport { connect } from 'react-redux'\nimport { MDBContainer, MDBRow, MDBBtn,MDBAnimation } from \"mdbreact\"\n\n\nimport TwitterCard from '../components/homepage/TwitterCard'\n\nclass StudentNews extends Component {\n    /**\n     * state\n     * set usertype to local storage usertype\n     */\n    state = {\n        usertype: localStorage.getItem(\"usertype\")\n    }\n    componentDidMount() {\n        if (this.state.usertype == \"Professor\")\n            this.props.history.push(\"/home\")\n        this.props.fetchPosts();\n    }\n\n    /**\n     * GoBack\n     * navigate to studentmain\n     */\n    GoBack=() => {this.props.history.push(\"/studentmain\")}\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * StudentNews page\n     * @returns StudentNews page\n     */\n    render() {\n        let twitterPosts = this.props.twitter.map(x => {\n            return (\n                <TwitterCard key={x.id_str} post={x} />\n            )\n        })\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBAnimation type=\"slideInUp\" count={1}>\n                <MDBContainer>\n                    <br />\n                    <h2>NTU Assignment News</h2>\n                    <hr />\n                    <MDBRow>\n                        {twitterPosts}\n                    </MDBRow>\n                    <br/>\n                    <MDBBtn color=\"red\" onClick = {this.GoBack} > Back\n                       </MDBBtn>\n                    <br />\n                </MDBContainer>\n                </MDBAnimation>\n                <Footer />\n            </div>\n        )\n    }\n}\nStudentNews.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    twitter: state.twitter.items,\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(StudentNews)\n","import React, { Component } from 'react'\nimport { MDBListGroup, MDBListGroupItem, MDBBadge, MDBIcon } from 'mdbreact';\n\nclass ClassmateList extends Component {\n    /**\n     * state\n     * Set default hover to false \n     */\n    state = {\n        hover: false,\n    }\n    /**\n     * selectCompetitor\n     * @param {*} name \n     * @param {*} id \n     */\n    selectCompetitor = (name, id) =>{\n        this.props.competitorSelect(name,id)\n    }\n    /**\n     * onHover\n     * set hover to the opposite state\n     */\n    onHover = () => {\n        this.setState({hover : !this.state.hover})\n    }\n\n    /**\n     * Classmatelist\n     * @returns classmatelist\n     */\n    render() {\n        var linkColor = (this.state.hover) ? {color: 'blue'} : {color: 'grey'}\n        let classmate = this.props.classmates.map(x => {\n            return(\n                <MDBListGroupItem onMouseOver={this.onHover} onMouseLeave={this.onHover} key={x.id} className=\"d-flex justify-content-between align-items-center\" onClick={() => this.selectCompetitor(x.name, x.id)} hover>{x.name}<MDBIcon style={linkColor} icon=\"arrow-right\" />\n                </MDBListGroupItem>\n            )\n        })\n        return (\n            <div>\n                <MDBListGroup style={{ width: \"22rem\" }}>\n                   {classmate}\n                </MDBListGroup>\n            </div>\n        )\n    }\n}\nexport default ClassmateList","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\n\nclass StudentAssignment extends Component {\n    /**\n     * SendNotification\n     * @param {*} leaderboardid data retrieve from leaderboardid\n     * @param {*} tutid data retrieve from tutid\n     */\n    SendNotification = (leaderboardid,tutid) =>{\n        this.props.notification(leaderboardid,tutid)\n    }\n    /**\n     * StudentAssignment\n     * @returns the table of studentAssignment with the id, tutname, score and date and display them\n     */\n    render() {\n        let myCompletedtut = this.props.myTut.map(x => {\n            return (\n                <tr key={x.id}>\n                    <td>{x.tutname}</td>\n                    <td>{x.score}</td>\n                    <td>{x.date}</td>\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.SendNotification(x.id,x.tutid)}> Compete </MDBBtn></td>\n                </tr>\n            )\n        })\n        return (\n            <div>\n                <MDBTable hover>\n                    <MDBTableHead>\n                        <tr>\n                            <th>Assignment Name</th>\n                            <th>Score</th>\n                            <th>Submitted on</th>\n                            <th>Compete</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        {myCompletedtut}\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        )\n    }\n}\nexport default StudentAssignment","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn } from \"mdbreact\"\nimport ClassmateList from '../components/competepage/ClassmateList'\nimport StudentAssignment from '../components/competepage/StudentAssignment'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchLeaderboard, myCompletedTutorial, sendCompeteRequest } from '../Redux/Actions/GameActions'\nimport { getClassmate } from '../Redux/Actions/AuthAction'\n\nclass Compete extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set name to local storage name\n     * set studid to localstorae studid\n     * set competitor, competitorid to \"\"\n     * set Assignmentdisplay to false\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        name: localStorage.getItem(\"name\"),\n        studid: localStorage.getItem(\"studid\"),\n        email: localStorage.getItem(\"email\"),\n        competitor: '',\n        competitorid: '',\n        Assignmentdisplay: false\n    }\n    componentDidMount() {\n        this.props.fetchLeaderboard();\n        this.getMycompletedTutList();\n        this.getClassmate();\n    }\n    /**\n     * getMycompletedTutList\n     */\n    getMycompletedTutList() {\n        const form = {\n            studid: this.state.studid\n        }\n        this.props.myCompletedTutorial(form)\n    }\n    /**\n     * CompetitorSelect\n     * @param {*} name\n     * @param {*} competitorid \n     */\n    CompetitorSelect = (name, competitorid) => {\n        this.setState({ competitor: name, competitorid: competitorid, Assignmentdisplay: true })\n    }\n    getClassmate() {\n        const form = {\n            tutgrp: this.state.tutgrp,\n            email: this.state.email\n        }\n        this.props.getClassmate(form)\n    }\n\n    /**\n     * CreateNotification\n     * @param {*} leaderboardid \n     * @param {*} tutid \n     */\n    CreateNotification = (leaderboardid, tutid) => {\n        const form = {\n            requestorid: localStorage.getItem(\"studid\"),\n            competitorid: this.state.competitorid,\n            leaderboardid: leaderboardid,\n            tutid: tutid\n        }\n        this.props.sendCompeteRequest(form);\n        this.props.history.push(\"/challenger\")\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n\n    /**\n     * GoBack\n     * navigate to studentmain\n     */\n    GoBack = () => { this.props.history.push(\"/studentmain\") }\n\n    /**\n     * Compete page\n     * @returns Compete page\n     */\n    render() {\n        console.log(this.props.classmate)\n        let currentclass = this.props.leaderboard.filter(x => x.tutgrp === this.state.tutgrp && x.name !== this.state.name)\n        let classMates = [...new Set(currentclass.map(item => ({ id: item.id, name: item.name, studid: item.studid })))];\n        let competeDisplay = (this.state.competitor === '') ? <h3>My classmates</h3> : <h3>Competing with {this.state.competitor}</h3>;\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n\n                        <MDBCol size=\"4\">\n                            <MDBAnimation type=\"slideInLeft\" >\n                                {competeDisplay}\n                                <hr />\n                                <ClassmateList classmates={this.props.classmate} competitorSelect={this.CompetitorSelect} />\n                            </MDBAnimation>\n\n                        </MDBCol>\n\n\n                        <MDBCol size=\"8\">\n                            {this.state.Assignmentdisplay &&\n                                <MDBAnimation type=\"slideInRight\">\n                                    <h3>Which Assignment to compete?</h3>\n                                    <hr />\n                                    <StudentAssignment myTut={this.props.mytut} notification={this.CreateNotification} />\n                                </MDBAnimation>\n                            }\n                        </MDBCol>\n\n                    </MDBRow>\n                    <MDBAnimation type=\"slideInLeft\" >\n                        <MDBBtn color=\"red\" onClick={this.GoBack} > Back\n                       </MDBBtn>\n                    </MDBAnimation>\n                </MDBContainer>\n                <br />\n                <Footer />\n            </div >\n        )\n    }\n}\nCompete.propTypes = {\n    fetchLeaderboard: PropTypes.func.isRequired,\n    myCompletedTutorial: PropTypes.func.isRequired,\n    sendCompeteRequest: PropTypes.func.isRequired,\n    getClassmate: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    leaderboard: state.game.records,\n    mytut: state.game.completedtut,\n    classmate: state.auth.mates\n});\n\nexport default connect(mapStateToProps, { fetchLeaderboard, getClassmate, myCompletedTutorial, sendCompeteRequest })(Compete)","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\n\nclass Competitorlist extends Component {\n    /**\n     * ViewCompetition\n     * @param {*} compid set compid to local storage compid\n     * @param {*} studid set studid to local storage compstudid\n     * @param {*} tutid set tutid to local storage comptutid\n     * @param {*} myldrid set myldrid to local storage muldrid\n     */\n    viewCompetition = (compid, studid, tutid, myldrid) => {\n        localStorage.setItem(\"compstudid\", studid);\n        localStorage.setItem(\"compid\", compid);\n        localStorage.setItem(\"comptutid\", tutid)\n        localStorage.setItem(\"myldrid\", myldrid)\n        this.props.navigate()\n    }\n    /**\n     * competitorlist\n     * @returns competitorlist details\n     */\n    render() {\n        let competitor = this.props.myCompetitors.map(x => {\n            return (\n                <tr key={x.competitionid}>\n                    <td>{x.name}</td>\n                    <td>{x.tutname}</td>\n                    <td>{x.score}</td>\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.viewCompetition(x.competitionid, x.id, x.tutid, x.leaderboardid)}>View More</MDBBtn></td>\n                </tr>\n            )\n        })\n        return (\n            <div>\n                <MDBTable hover>\n                    <MDBTableHead>\n                        <tr>\n                            <th>Competitor Name</th>\n                            <th>Tutorial Name</th>\n                            <th>My Score</th>\n                            <th>View</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        {competitor}\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        )\n    }\n}\nexport default Competitorlist","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead, MDBBtn } from 'mdbreact';\n\nclass Challengerlist extends Component {\n    /**\n     * viewChallenge\n     * @param {*} compid set compid to local storage compid\n     * @param {*} studid set studid to local storage mystudid\n     * @param {*} tutid set tutid to local storage comptutid\n     * @param {*} oppldrid set oppldrid to local storage oppldrid\n     * @param {*} challengerid set channgerid to local storage challengerid\n     */\n    viewChallenge = (compid, studid, tutid, oppldrid, challengerid) => {\n        localStorage.setItem(\"mystudid\", studid);\n        localStorage.setItem(\"compid\", compid);\n        localStorage.setItem(\"comptutid\", tutid)\n        localStorage.setItem(\"oppldrid\", oppldrid)\n        localStorage.setItem(\"challengerid\", challengerid)\n        this.props.navigate()\n    }\n\n    /**\n     * ChallengerList\n     * @returns challengerlist details\n     */\n    render() {\n        let challenge = this.props.myChallenger.map(x => {\n            return (\n                <tr key={x.competitionid}>\n                    <td>{x.name}</td>\n                    <td>{x.tutname}</td>\n                    <td>{x.score}</td>\n                    <td><MDBBtn size=\"sm\" color=\"green\" onClick={() => this.viewChallenge(x.competitionid, x.competitorid, x.tutid, x.leaderboardid, x.id)}>View More</MDBBtn></td>\n                </tr>\n            )\n        })\n        return (\n            <div>\n                <MDBTable hover>\n                    <MDBTableHead>\n                        <tr>\n                            <th>Challenger Name</th>\n                            <th>Tutorial Name</th>\n                            <th>Challengers Score</th>\n                            <th>View</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        {challenge}\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        )\n    }\n}\nexport default Challengerlist","export default __webpack_public_path__ + \"static/media/friendly.0fd67717.jpg\";","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport { MDBContainer, MDBRow, MDBCol, MDBAnimation, MDBBtn, MDBView, MDBMask } from \"mdbreact\"\nimport Competitorlist from '../components/challengerpage/Competitorlist'\nimport Challengerlist from '../components/challengerpage/Challengerlist'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { getMyCompetitors, getChallengers } from '../Redux/Actions/GameActions'\nimport friendly from '../assets/friendly.jpg'\n\nclass Challenger extends Component {\n    /**\n     * state\n     * set studid to local storage studid\n     */\n    state = {\n        studid: localStorage.getItem(\"studid\")\n    }\n    componentDidMount() {\n        this.getCompetitor();\n        this.getChallengers();\n    }\n\n    /**\n     * getCompeitior\n     */\n    getCompetitor() {\n        const form = {\n            requestorid: this.state.studid\n        }\n        this.props.getMyCompetitors(form)\n    }\n    /**\n     * getChallengers\n     */\n    getChallengers() {\n        const form = {\n            competitorid: this.state.studid\n        }\n        this.props.getChallengers(form)\n    }\n    /**\n     * ViewCompetition\n     */\n    ViewCompetition = () => {\n        this.props.history.push('/competitor')\n    }\n    /**\n     * ViewChallenge\n     */\n    ViewChallenge = () => {\n        this.props.history.push('/challenge')\n    }\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * competeMode \n     */\n    CompeteMode = () => this.props.history.push('/compete')\n\n    /**\n     * GoBack\n     * navigate to student\n     */\n    GoBack = () => { this.props.history.push(\"/studentmain\") }\n\n/**\n * Challenger page\n * @returns Challenger page\n */\n    render() {\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <br />\n                <MDBContainer>\n                    <MDBAnimation type=\"slideInDown\">\n                        <MDBRow center>\n                            <MDBCol size=\"8\">\n                                <h3>Compete with your friends!</h3>\n                                <hr />\n                                <MDBView hover>\n                                    <img src={friendly} href=\"#\" onClick={this.CompeteMode} className=\"img-fluid\" alt=\"\" />\n                                    <MDBMask className=\"flex-center\" overlay=\"blue-strong\" onClick={this.CompeteMode}>\n                                        <p className=\"white-text\">Click here to compete with your friends!</p>\n                                    </MDBMask>\n                                </MDBView>\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBAnimation>\n                    <br />\n                    <MDBAnimation type=\"slideInDown\">\n                        <MDBRow>\n                            <MDBCol size=\"12\">\n                                <h3>My Competitors Request</h3>\n                                <hr />\n                                <Competitorlist navigate={this.ViewCompetition} myCompetitors={this.props.competitors} />\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBAnimation>\n                    <br />\n                    <MDBAnimation type=\"slideInUp\">\n                        <MDBRow>\n                            <MDBCol>\n                                <h3>My Challengers</h3>\n                                <hr />\n                                <Challengerlist navigate={this.ViewChallenge} myChallenger={this.props.challengers} />\n                            </MDBCol>\n                        </MDBRow>\n                        <MDBBtn color=\"red\" onClick={this.GoBack}> Back</MDBBtn>\n                    </MDBAnimation>\n                </MDBContainer>\n                <Footer />\n            </div>\n        )\n    }\n}\nChallenger.propTypes = {\n    getMyCompetitors: PropTypes.func.isRequired,\n    getChallengers: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    competitors: state.game.competitors,\n    challengers: state.game.challengers\n});\nexport default connect(mapStateToProps, { getMyCompetitors, getChallengers })(Challenger)","import React, { Component } from 'react'\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\nclass CompetitorDetail extends Component {\n/**\n * CompetitorDetails\n * @returns return competitor details\n */\n\n    render() {\n        let details = this.props.student.map(x => {\n            return (\n                <MDBCard key={x.id} style={{ width: \"22rem\" }}>\n                    <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\n                    <MDBCardBody>\n                        <MDBCardTitle>{x.name}</MDBCardTitle>\n                        <MDBCardText>\n                            Email: {x.email} <br />\n                Tutorial Group: {x.tutgrp}\n                        </MDBCardText>\n                    </MDBCardBody>\n                </MDBCard>\n            )\n        })\n        return (\n            <div>\n                {details}\n            </div>\n        )\n    }\n}\nexport default CompetitorDetail","import React, { Component } from 'react'\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCol, MDBRow, MDBContainer, MDBCardText } from 'mdbreact';\n\nclass MyDetails extends Component {\n/**\n * My Details\n * @returns my details\n */\n    render() {\n        const { student } = this.props\n        return (\n            <div>\n                {student && student.map(x => {\n                    return (\n                        <MDBCard key={x.id} style={{ width: \"22rem\" }}>\n                            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\n                            <MDBCardBody>\n                                <MDBCardTitle>{x.name}</MDBCardTitle>\n                                <MDBCardText>\n                                    Email: {x.email} <br />\n                Tutorial Group: {x.tutgrp}\n                                </MDBCardText>\n                            </MDBCardBody>\n                        </MDBCard>\n                    )\n                })}\n            </div>\n        )\n    }\n}\nexport default MyDetails","import React, { Component } from 'react'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBInputGroup, MDBAnimation, MDBProgress } from \"mdbreact\"\nimport CompetitorDetail from '../components/challengerpage/CompetitorDetail'\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\nimport { getStudentInfo, getCompeteMyInfo } from '../Redux/Actions/AuthAction'\nimport { sendComment, getCurrentUserScore, getCompetitorScore } from '../Redux/Actions/GameActions'\nimport MyDetails from '../components/challengerpage/MyDetails'\n\nclass Competitor extends Component {\n    /**\n     * state\n     * set studid to local storage compstudid\n     * set compid to local storage compid\n     * set tutid to local storage comptutid\n     * set myldrid to local storage myldrid\n     * set mystudid to local storage studid\n     * set comment and commentError to \"\"\n     */\n    state = {\n        studid: localStorage.getItem(\"compstudid\"),\n        compid: localStorage.getItem(\"compid\"),\n        tutid: localStorage.getItem(\"comptutid\"),\n        myldrid: localStorage.getItem(\"myldrid\"),\n        mystudid: localStorage.getItem(\"studid\"),\n        comment: '',\n        commentError:\"\"\n    }\n    componentDidMount() {\n        console.log(this.state)\n        this.getCompetitorDetails()\n        this.getCompetitorScoreBoard();\n        this.getMyScore();\n        this.getmyDetails();\n    }\n/**\n * validate\n * @returns error handling when comment is empty\n */\n    validate() {\n        let commentError = \"\";\n        if (!this.state.comment){\n            commentError= \"Comment cannot be empty\";\n            this.setState({commentError});\n            return false;\n        }\n        return true;\n    }\n/**\n * getCompetitorDetails\n */\n    getCompetitorDetails() {\n        const form = {\n            id: this.state.studid\n        }\n        this.props.getStudentInfo(form)\n    }\n    /**\n     * getmyDetails\n     */\n    getmyDetails() {\n        const form = {\n            id: this.state.mystudid\n        }\n        this.props.getCompeteMyInfo(form)\n    }\n    /**\n     * getCompetitorScoreBoard\n     */\n    getCompetitorScoreBoard() {\n        const form = {\n            studid: this.state.studid,\n            tutid: this.state.tutid\n        }\n        this.props.getCompetitorScore(form)\n    }\n    /**\n     * getMyScore\n     */\n    getMyScore() {\n        const form = {\n            leaderboardid: this.state.myldrid\n        }\n        this.props.getCurrentUserScore(form)\n    }\n    /**\n     * SendComment\n     */\n    SendComment = () => {\n       \n        const form = {\n            compid: this.state.compid,\n            comment: this.state.comment\n        }\n        const isValid = this.validate();\n        if (isValid) {\n            this.setState({commentError: \"\"});\n            this.props.sendComment(form)\n            this.props.history.push('/challenger')\n        }\n    }\n\n    /**\n     * handleChange\n     * @param {*} e handle all the changes that were received\n     */\n    handleChange = (e) => {\n        this.setState({ [e.target.id]: e.target.value })\n    }\n    /**\n     * GoBack\n     * navigate to challenger\n     */\n    GoBack = () => {\n        this.props.history.push('/challenger')\n    }\n\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n\n/**\n * Competitor Page\n * @returns Competitor Page\n */\n    render() {\n        let myscore = this.props.myScore.map(x => parseInt(x.score))\n        let competitorscore = this.props.competitorscore.map(x => parseInt(x.score))\n        let resultDisplay = (myscore[0] < competitorscore[0]) ? <React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://t3.ftcdn.net/jpg/01/15/89/20/360_F_115892005_HMEE0k02qxE2PMgSoEuulFNokLEvP7kW.jpg\" className=\"img-fluid\" /></React.Fragment> :<React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://image.freepik.com/free-vector/you-win-lettering-pop-art-text-banner_185004-60.jpg\" className=\"img-fluid\" /> </React.Fragment>\n        let checkCompetitorTut = (this.props.competitorscore.length === 0) ? <React.Fragment><h4 className=\"red-text\">This student have not done this tutorial</h4></React.Fragment> : <React.Fragment></React.Fragment>\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <MDBAnimation type=\"slideInLeft\">\n                        <br />\n                        <MDBRow>\n                            <MDBCol size=\"6\">\n                                <h3>My Details</h3>\n                                <hr />\n                                <br />\n                                <MyDetails student={this.props.currentUserInfo} />\n                                <br /><br />\n                                {this.props.myScore && this.props.myScore.map(x => {\n                                    return (\n                                        <React.Fragment>\n                                            <br />\n                                            <h3>My Answer</h3>\n                                            <hr />\n                                            <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\n                                            <br /> <br />\n                                            <h3>My Score</h3>\n                                            <hr />\n                                            <MDBRow>\n                                                <MDBCol size=\"9\">\n                                                    <MDBProgress value={x.score} className=\"my-2\" />\n                                                </MDBCol>\n                                                <MDBCol size=\"3\">\n                                                    Score: {x.score}\n                                                </MDBCol>\n                                            </MDBRow>\n                                            <br />\n                                            <h3>Professor's Comment to me</h3>\n                                            <hr />\n                                            <p>{(x.comment == '') ? \"No Comment\" : x.comment}</p>\n                                        </React.Fragment>\n                                    )\n                                }\n                                )}\n                                 {resultDisplay}\n                            </MDBCol>\n                            <MDBCol size=\"6\">\n                                <h3>Competitor Details</h3>\n                                <hr />\n                                <CompetitorDetail student={this.props.student} />\n                                <br />\n                                {this.props.competitorscore && this.props.competitorscore.map(x => {\n                                    return (\n                                        <React.Fragment>\n                                            <br /><br /><br />\n                                            <h3>Competitor's Answer</h3>\n                                            <hr />\n                                            <img src={ x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\n                                            <br /> <br />\n                                            <h3>Competitor's Score</h3>\n                                            <hr />\n                                            <MDBRow>\n                                                <MDBCol size=\"9\">\n                                                    <MDBProgress value={x.score} className=\"my-2\" />\n                                                </MDBCol>\n                                                <MDBCol size=\"3\">\n                                                    Score: {x.score}\n                                                </MDBCol>\n                                            </MDBRow>\n                                            <br />\n                                            <h3>Professor's Comment to Competitor</h3>\n                                            <hr />\n                                            <p>{x.comment}</p>\n                                  \n                                        </React.Fragment>\n                                    )\n                                }\n                                )}\n                             \n                                <br />\n                                <h3>Compose a message to your competitor</h3>\n                                <hr />\n                                <MDBInput id='comment' value={this.state.comment} label=\"Comment\" icon=\"comment\" onChange={this.handleChange}>\n                                </MDBInput>\n                                <div style={{ fontSize: 20, color: \"rgb(255, 61, 61)\" }}> {this.state.commentError}</div>\n                          \n                                <MDBBtn\n                                    onClick={this.SendComment}\n                                    color=\"blue\"\n                                    className=\"m-0 px-3 py-2 z-depth-0\">\n                                    Send Message\n                            </MDBBtn>\n                                <MDBBtn\n                                    onClick={this.GoBack}\n                                    color=\"red\"\n                                    className=\"m-0 px-3 py-2 z-depth-0\">\n                                    Back\n                            </MDBBtn>\n                            <br/><br/>\n                            {checkCompetitorTut}\n                            </MDBCol>\n                        </MDBRow>\n                    </MDBAnimation>\n                </MDBContainer>\n                <br/><br/>\n                <br />\n                <Footer />\n\n            </div>\n        )\n    }\n}\nCompetitor.Proptypes = {\n    getStudentInfo: Proptypes.func.isRequired,\n    sendComment: Proptypes.func.isRequired,\n    getCurrentUserScore: Proptypes.func.isRequired,\n    getCompetitorScore: Proptypes.func.isRequired,\n    getCompeteMyInfo: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    student: state.auth.studentinfo,\n    myScore: state.game.myscore,\n    competitorscore: state.game.competitor,\n    currentUserInfo: state.auth.myInfo\n})\nexport default connect(mapStateToProps, { getStudentInfo, sendComment, getCurrentUserScore, getCompetitorScore, getCompeteMyInfo })(Competitor)","import React, { Component } from 'react'\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\n\nclass ChallengerDetail extends Component {\n    /**\n     * Challenger details\n     * @returns challenger details\n     */\n    render() {\n        let details = this.props.student.map(x => {\n            return (\n                <MDBCard key={x.id} style={{ width: \"22rem\" }}>\n                    <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\n                    <MDBCardBody>\n                        <MDBCardTitle>{x.name}</MDBCardTitle>\n                        <MDBCardText>\n                            Email: {x.email} <br />\n                Tutorial Group: {x.tutgrp}\n                        </MDBCardText>\n                    </MDBCardBody>\n                </MDBCard>\n            )\n        })\n        return (\n            <div>\n                {details}\n            </div>\n        )\n    }\n}\nexport default ChallengerDetail","import React, { Component } from 'react'\nimport ChallengerDetail from '../components/challengerpage/ChallengerDetail'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\nimport { getStudentInfo, getCompeteMyInfo } from '../Redux/Actions/AuthAction'\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput, MDBProgress } from \"mdbreact\"\nimport { getComment, getCurrentUserScore, getCompetitorScore } from '../Redux/Actions/GameActions'\nimport MyDetails from '../components/challengerpage/MyDetails'\n\nclass Challenge extends Component {\n    /**\n     * state\n     * set studid to local storage mystudid\n     * set compid to local storage compid\n     * set tutid to local storage comptutid\n     * set myldrid to local storage oppldrid\n     * set challengerid to local storage challengerid\n     */\n    state = {\n        studid: localStorage.getItem(\"mystudid\"),\n        compid: localStorage.getItem(\"compid\"),\n        tutid: localStorage.getItem(\"comptutid\"),\n        myldrid: localStorage.getItem(\"oppldrid\"),\n        challengerid: localStorage.getItem(\"challengerid\")\n    }\n    componentDidMount() {\n        this.getCompetitorDetails()\n        this.retrieveComment()\n        this.getMyScoreBoard()\n        this.getOppScore()\n        this.getmyDetails()\n    }\n    /**\n     * retrieveComment\n     */\n    retrieveComment() {\n        const form = {\n            compid: this.state.compid\n        }\n        this.props.getComment(form)\n    }\n    /**\n     * getcompetitorDetails\n     */\n    getCompetitorDetails() {\n        const form = {\n            id: this.state.challengerid\n        }\n        this.props.getStudentInfo(form)\n    }\n    /**\n     * getmyDetails\n     */\n    getmyDetails() {\n        const form = {\n            id: localStorage.getItem(\"studid\")\n        }\n        this.props.getCompeteMyInfo(form)\n    }\n    /**\n     * getMyscoreBoard\n     */\n    getMyScoreBoard() {\n        const form = {\n            studid: this.state.studid,\n            tutid: this.state.tutid\n        }\n        console.log(form)\n        //Call Same function coz it's the opposite of competitor\n        this.props.getCompetitorScore(form)\n    }\n    /**\n     * getOppScore\n     */\n    getOppScore() {\n        const form = {\n            leaderboardid: this.state.myldrid\n        }\n        //Call Same function coz it's the opposite of competitor\n        this.props.getCurrentUserScore(form)\n    }\n    /**\n     * GoBack\n     * navigate to challenger\n     */\n    GoBack = () => {\n        this.props.history.push('/challenger')\n    }\n\n    /**\n     * notLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * Challenger Page\n     * @returns Challenger Page\n     */\n    render() {\n        let myscore = this.props.competitorscore.map(x => parseInt(x.score))\n        let competitorscore = this.props.challengerScore.map(x => parseInt(x.score))\n\n        let comment = this.props.challengecomment.map(x => x.competitormsg)\n\n        let resultDisplay = (this.props.competitorscore.length == 0) ? <React.Fragment><h4 className=\"red-text\">You have not done this tutorial</h4> <hr/> </React.Fragment> : (myscore[0] < competitorscore[0]) ? <React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://t3.ftcdn.net/jpg/01/15/89/20/360_F_115892005_HMEE0k02qxE2PMgSoEuulFNokLEvP7kW.jpg\" className=\"img-fluid\" /></React.Fragment> :<React.Fragment><h3>Final Result</h3><hr/> <img src=\"https://image.freepik.com/free-vector/you-win-lettering-pop-art-text-banner_185004-60.jpg\" className=\"img-fluid\" /> </React.Fragment>\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <MDBContainer>\n                    <br />\n                    <MDBRow>\n                        <MDBCol size=\"6\">\n                            <h3>My Details</h3>\n                            <hr />\n                            <MyDetails student={this.props.currentUserInfo} />\n                            <br /><br />\n\n                            {this.props.competitorscore && this.props.competitorscore.map(x => {\n                                return (\n                                    <React.Fragment>\n                                        <h3>My Answer</h3>\n                                        <hr />\n                                        <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\n                                        <br /> <br />\n                                        <h3>My Score</h3>\n                                        <hr />\n                                        <MDBRow>\n                                            <MDBCol size=\"9\">\n                                                <MDBProgress value={x.score} className=\"my-2\" />\n                                            </MDBCol>\n                                            <MDBCol size=\"3\">\n                                                Score: {x.score}\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <h3>Professor's Comment to me</h3>\n                                        <hr />\n                                        <p>{(x.comment == '') ? \"No Comment\" : x.comment}</p>\n                                    </React.Fragment>\n                                )\n                            }\n                            )}\n                            {resultDisplay}\n                            \n                        </MDBCol>\n                        <MDBCol size=\"6\">\n                            <h3>Challenger Detail</h3>\n                            <hr />\n                            <ChallengerDetail student={this.props.student} />\n                            <br />\n                            {this.props.challengerScore && this.props.challengerScore.map(x => {\n                                return (\n                                    <React.Fragment>\n                                        <br />\n                                        <h3>Competitor's Answer</h3>\n                                        <hr />\n                                        <img src={x.image} className=\"img-fluid z-depth-1\" alt=\"\" />\n                                        <br /> <br />\n                                        <h3>Competitors Scores</h3>\n                                        <hr />\n                                        <MDBRow>\n                                            <MDBCol size=\"9\">\n                                                <MDBProgress value={x.score} className=\"my-2\" />\n                                            </MDBCol>\n                                            <MDBCol size=\"3\">\n                                                Score: {x.score}\n                                            </MDBCol>\n                                        </MDBRow>\n                                        <h3>Professor's Comment to Competitor</h3>\n                                        <hr />\n                                        <p>{x.comment}</p>\n                                    </React.Fragment>\n                                )\n                            }\n                            )}\n                            <h3>Challenger Message to you</h3>\n                            <hr />\n                            <MDBInput disabled value={comment} label=\"Comment\" icon=\"comment\" onChange={this.handleChange}>\n                            </MDBInput>\n                            <MDBBtn\n                                onClick={this.GoBack}\n                                color=\"red\"\n                                className=\"m-0 px-3 py-2 z-depth-0\">\n                                Back\n                            </MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <br /><br/><br/>\n                <Footer />\n            </div>\n        )\n    }\n}\nChallenge.Proptypes = {\n    getStudentInfo: Proptypes.func.isRequired,\n    getComment: Proptypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    student: state.auth.studentinfo,\n    challengecomment: state.game.comment,\n    challengerScore: state.game.myscore,\n    competitorscore: state.game.competitor,\n    currentUserInfo: state.auth.myInfo\n})\nexport default connect(mapStateToProps, { getStudentInfo, getCompeteMyInfo, getComment, getCompetitorScore, getCurrentUserScore })(Challenge)","import React from 'react';\nimport { MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol, MDBRow, MDBContainer } from 'mdbreact';\n\nconst StudentCard = ({ studname, profilepic, studemail, studtutgrp }) => {\n  /**\n   * StudentCard\n   */\n  return (\n    <div>\n       <MDBCard style={{ width: \"22rem\" }}>\n        <MDBCardImage className=\"img-fluid\" src={profilepic} waves />\n        <MDBCardBody>\n          <MDBCardTitle>{studname}</MDBCardTitle>\n          <MDBCardText>\n            Email: {studemail} <br />\n                Tutorial Group: {studtutgrp}\n          </MDBCardText>\n        </MDBCardBody>\n      </MDBCard>\n    </div>\n  )\n}\n\nexport default StudentCard;","import { MDBCol, MDBContainer, MDBRow, MDBInput, MDBBtn } from 'mdbreact'\nimport React, { Component } from 'react'\nimport StudentCard from '../components/mysubmissionpage/StudentCard'\nimport Footer from '../components/share/Footer'\nimport Navbar from '../components/share/Navbar'\nimport { getStudentSubmission } from '../Redux/Actions/GameActions'\nimport { connect } from 'react-redux'\nimport Proptypes from 'prop-types'\n\nclass MySubmission extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set studid to local storage studid\n     * set email to local storage emaol\n     * set picture to local storage picture\n     * set name to local storage name\n     * set fbid to local storage fbid\n     * ldrid : id\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        studid: localStorage.getItem(\"studid\"),\n        email: localStorage.getItem(\"email\"),\n        picture: localStorage.getItem(\"picture\"),\n        name: localStorage.getItem(\"name\"),\n        fbid: localStorage.getItem(\"fbid\"),\n        ldrid: this.props.match.params.id,\n    }\n    componentDidMount() {\n        this.getLeaderBoardSubmission()\n    }\n    /**\n     * getLeaderBoardSubmission\n     */\n    getLeaderBoardSubmission() {\n        const form = {\n            id: this.state.ldrid\n        }\n        this.props.getStudentSubmission(form)\n    }\n\n    /**\n     * NotLoggedIn\n     */\n    NotLoggedIn = () => {\n        this.props.history.push('/logout')\n    }\n    /**\n     * GoBack\n     * navigate to studentmain\n     */\n    GoBack = () => this.props.history.push('/studentmain')\n    /**\n     * MySubmission page\n     * @returns MySubmission page\n     */\n    render() {\n        let ProfComment = this.props.studSubmission.map(x => {\n            return (\n                <React.Fragment>\n                    <MDBInput label=\"Score\" icon=\"star\" disabled value={x.score} />\n                    <MDBInput label=\"Comment\" icon=\"comment\" disabled value={x.comment} />\n                </React.Fragment>\n            )\n        })\n        let answer = this.props.studSubmission.map(x => <img className=\"img-fluid\" src={x.image} alt=\"\" />)\n        return (\n            <div>\n                <Navbar validateLogin={this.NotLoggedIn} />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol size=\"6\">\n                            <h3>My Details</h3>\n                            <hr />\n                            <StudentCard profilepic={this.state.picture} studname={this.state.name} studemail={this.state.email} studtutgrp={this.state.tutgrp} />\n                        </MDBCol>\n                        <MDBCol size=\"6\">\n                            <h3>My Answer</h3>\n                            <hr />\n                            {answer}\n                        </MDBCol>\n                    </MDBRow>\n                    <br />\n                    <MDBRow center>\n                        <MDBCol size=\"6\">\n                            <h3>Professor Comments</h3>\n                            <hr />\n                            {ProfComment}\n                            <MDBBtn color=\"red\" onClick={this.GoBack} size=\"sm\">Back</MDBBtn>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <br /><br /><br />\n                <Footer />\n            </div>\n        )\n    }\n}\nMySubmission.Proptypes = {\n    getStudentSubmission: Proptypes.func.isRequired\n}\nconst mapStateToProps = state => ({\n    studSubmission: state.game.submission\n})\n\nexport default connect(mapStateToProps, { getStudentSubmission })(MySubmission)\n","import React, { Component } from 'react'\nimport { Bar } from 'react-chartjs-2'\n\n\nclass BarGraph extends Component {\n    /**\n     * state\n     * set charData to {}\n     * data retrieve from GraphData\n     */\n    state = {\n        chartData: {},\n        data: this.props.GraphData\n    }\n    componentDidMount() {\n        this.PopulateData()\n    }\n    /**\n     * ViewStudent\n     * @param {*} e \n     * @param {*} elem \n     */\n    ViewStudent = (e, elem) => {\n        if (elem.length > 0) {\n            var ind = elem[0]._index\n            this.props.viewStudent(this.state.data[ind].studid)\n        }\n    }\n\n    /**\n     * PopulateData\n     */\n    PopulateData = () => {\n        this.setState({\n            chartData: {\n                labels: [...this.state.data.map(x => x.name)],\n                datasets: [{\n                    label: 'Score',\n                    data: [...this.state.data.map(x => x.score),0],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1,\n                }],\n            }\n        })\n    }\n    /**\n     * BarGraph\n     * @returns BarGraph \n     */\n    render() {\n        const options = {\n            onClick: (e, elem) => this.ViewStudent(e, elem),\n            scales: {\n                xAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Student Name'\n                    },\n                }],\n                yAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Student's Score\"\n                    },\n                }],\n            }\n            \n        }\n        return (\n            <div>\n                <Bar\n                    data={this.state.chartData}\n                    width={100}\n                    height={50}\n                    options={options}\n                />\n            </div>\n        )\n    }\n}\nexport default BarGraph","import React, { Component } from 'react'\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact'\n\nclass StatisticalAnalysis extends Component {\n    /**\n     * State\n     * set count, average, standardDeviation, minimum, maximum to \"\"\n     * retrieve score from scores\n     */\n    state = {\n        score: [...this.props.scores.map(x => parseFloat(x.score))],\n        count: '',\n        average: '',\n        standardDeviation: '',\n        minimum: '',\n        maximum: ''\n    }\n    componentDidMount() {\n       this.CalclateStatistics();       \n    }\n    /**\n     * CalculateStatics\n     * set state count, minimum, maximum, average, standardDeviation\n     */\n    CalclateStatistics() {\n        let count = this.state.score.length\n        let minimum = Math.min(...this.state.score)\n        let maximum = Math.max(...this.state.score)\n        let average = (this.state.score.reduce((total, current) => total += current,0) / count).toFixed(2)\n        let standardDeviation = Math.sqrt(this.state.score.map(x => Math.pow(x - average, 2)).reduce((summation, i) => summation += i, 0) / count).toFixed(2)\n\n        this.setState({\n            count,\n            minimum,\n            maximum,\n            average,\n            standardDeviation\n        })\n    }\n/**\n * StatisticalAnalysis\n * @returns StatisticalAnalysis\n */\n    render() {\n        return (\n            <div>\n                <MDBTable hover>\n                    <MDBTableHead color=\"blue\" textWhite>\n                        <tr>\n                            <th>Count</th>\n                            <th>Average</th>\n                            <th>Standard Deviation</th>\n                            <th>Minimum</th>\n                            <th>Maximum</th>\n                        </tr>\n                    </MDBTableHead>\n                    <MDBTableBody>\n                        <tr>\n                            <td>{this.state.count}</td>\n                            <td>{this.state.average}</td>\n                            <td>{this.state.standardDeviation}</td>\n                            <td>{this.state.minimum}</td>\n                            <td>{this.state.maximum}</td>\n                        </tr>\n                    </MDBTableBody>\n                </MDBTable>\n            </div>\n        )\n    }\n}\nexport default StatisticalAnalysis","import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nclass LineGraph extends Component {\n    /**\n     * state \n     * charData = {}\n     * data retrieve from LineGraphData\n     */\n    state = {\n        chartData: {},\n        data: this.props.LineGraphData\n    }\n    componentDidMount() {\n        this.PopulateData()\n    }\n    /**\n     * PopulateData\n     */\n    PopulateData = () => {\n        this.setState({\n            chartData: {\n                labels: [0,...this.state.data.map((x,index) => index + 1)],\n                datasets: [\n                    {\n                        label: this.state.data[0].name ,\n                        data: [0,...this.state.data.map(x => parseFloat(x.score))],\n                        fill: true,\n                        backgroundColor: \"rgba(75,192,192,0.2)\",\n                        borderColor: \"rgba(75,192,192,1)\"\n                    }\n                ]\n            }\n        })\n    }\n    /**\n     * LineGraph\n     * @returns  LineGraph\n     */\n    render() {\n        const options = {\n            scales: {\n                xAxes: [{\n                    display: true,\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Number of Tries'\n                    },\n                  }],\n                  yAxes: [{\n                    display: true,\n                    scaleLabel: {\n                      display: true,\n                      labelString: \"Student's Score\"\n                    },\n                  }],\n            }\n        }\n        return (\n            <div>\n                <Line data={this.state.chartData} options={options}/>\n            </div>\n        )\n    }\n}\nexport default LineGraph","import React, { Component } from 'react'\nimport { MDBBtn, MDBCard, MDBCardBody, MDBCardImage, MDBCardTitle, MDBCardText, MDBCol } from 'mdbreact';\n\nclass StudentCard extends Component {\n    /**\n     * StudentCard\n     * @returns StudentCard\n     */\n    render() {\n        return (\n            <div>\n                {this.props.profile && this.props.profile.map(x => {\n                    return (\n                        <MDBCard style={{ width: \"22rem\" }}>\n                            <MDBCardImage className=\"img-fluid\" src={x.picture} waves />\n                            <MDBCardBody>\n                                <MDBCardTitle>{x.name}</MDBCardTitle>\n                                <MDBCardText>\n                                    Email: {x.email} <br/>\n                                    Tutorial Group: {x.tutgrp}\n                                </MDBCardText>\n                                <a className=\"btn blue white-text\" href={\"mailto:\" + x.email}>Email Student</a>\n                            </MDBCardBody>\n                        </MDBCard>\n                    )\n                })\n                }\n            </div>\n        )\n    }\n}\nexport default StudentCard","import React, { Component } from 'react'\nimport { MDBCol, MDBContainer, MDBRow, MDBIcon, MDBBtn } from 'mdbreact'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\nimport BarGraph from '../components/reportpage/BarGraph'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\nimport StatisticalAnalysis from '../components/reportpage/StatisticalAnalysis'\nimport LineGraph from '../components/reportpage/LineGraph'\nimport StudentCard from '../components/reportpage/StudentCard'\nimport { getStudentInfo } from '../Redux/Actions/AuthAction'\n\nclass Report extends Component {\n    /**\n     * state\n     * set tutgrp to local storage tutgrp\n     * set tutid to local storage selectedTutId\n     * set tutname to local storage selectedTutName\n     * set student to []\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        tutid: localStorage.getItem(\"selectedTutId\"),\n        tutname: localStorage.getItem(\"selectedTutName\"),\n        student: []\n    }\n    componentDidMount() {\n        this.props.fetchLeaderboard();\n    }\n    /**\n     * StudentAnalysis\n     * @param {*} studid \n     */\n    StudentAnalysis = (studid) => {\n        this.setState({ student: [] })\n        let selectedStudent = this.props.leaderboard.filter(x => x.tutid === this.state.tutid && x.studid === studid && x.tutgrp === this.state.tutgrp)\n        this.getStudentDetails(studid)\n        this.setState({ student: selectedStudent })\n    }\n    /**\n     * GetStudentDetails\n     * @param {*} studid \n     */\n    getStudentDetails(studid) {\n        const form = {\n            id: studid\n        }\n        this.props.getStudentInfo(form)\n    }\n    /**\n     * PrintPage\n     */\n    printPage = () => {\n        window.print()\n    }\n\n    /**\n     * goBack\n     * navigate to reporthome\n     */\n    goBack = () => this.props.history.push('/reporthome')\n\n    /**\n     * Report page\n     * @returns Report page\n     */\n    render() {\n        let { leaderboard } = this.props\n        let CurrentAssginmentScores = leaderboard.filter(x => x.tutgrp === this.state.tutgrp && x.tutid === this.state.tutid).map(z => ({ name: z.name, score: z.score, studid: z.studid }))\n        let HighestScoreForEachStudent = CurrentAssginmentScores.reduce((state, current) => {\n            let prevIndex = state.findIndex(x => x.name === current.name);\n            if (prevIndex === -1)\n                state.push(current)\n            else if (state[prevIndex].score < current.score)\n                state[prevIndex] = current\n            return state\n        }, [])\n        return (\n            <div>\n                <Navbar />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol size=\"12\">\n                            <h3>Student Scores for: {this.state.tutname} </h3>\n                            <hr />\n                            {leaderboard && <BarGraph GraphData={HighestScoreForEachStudent} AssignmentScoreList={CurrentAssginmentScores} viewStudent={this.StudentAnalysis} />}\n                        </MDBCol>\n                        <br />\n                        <MDBCol size=\"12\">\n                            <h3>Statistical Analysis</h3>\n                            <hr />\n                            {CurrentAssginmentScores && <StatisticalAnalysis scores={CurrentAssginmentScores} />}\n                        </MDBCol>\n                        {(this.state.student.length !== 0 && this.props.selectedStudent) &&\n                            <React.Fragment>\n                                <MDBCol size=\"4\">\n                                    <h3>Student Profile</h3>\n                                    <hr />\n                                    <StudentCard key={this.props.selectedStudent.id} profile={this.props.selectedStudent} />\n                                </MDBCol>\n\n                                <MDBCol size=\"8\">\n                                    <h3>Student Performance</h3>\n                                    <hr />\n                                    <LineGraph LineGraphData={this.state.student} />\n                                    <MDBBtn onClick={this.printPage} color=\"blue\">Print <MDBIcon icon=\"print\" className=\"mr-1\" /></MDBBtn>\n                                </MDBCol>\n                            </React.Fragment>\n                        }\n                    </MDBRow>\n                    <MDBBtn onClick={this.goBack} color=\"red\">Back</MDBBtn>\n                </MDBContainer>\n                <br /><br />\n                <Footer />\n            </div>\n        )\n    }\n}\nReport.propTypes = {\n    fetchLeaderboard: PropTypes.func.isRequired,\n    getStudentInfo: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    leaderboard: state.game.records,\n    selectedStudent: state.auth.studentinfo,\n});\n\nexport default connect(mapStateToProps, { fetchLeaderboard, getStudentInfo })(Report)","import React, { Component } from 'react'\nimport { Bar } from 'react-chartjs-2'\n\n\nclass TutorialAvgGraph extends Component {\n    /**\n     * state \n     * set chartData to {}\n     * data = GraphData\n     */\n    state = {\n        chartData: {},\n        data: this.props.GraphData\n    }\n    componentDidMount() {\n        this.PopulateData()\n    }\n    /**\n     * PopulateData\n     */\n    PopulateData = () => {\n        console.log(this.state.data)\n        this.setState({\n            chartData: {\n                labels: [...this.state.data.map(x => x.tutname)],\n                datasets: [{\n                    label: 'Score',\n                    data: [...this.state.data.map(x => parseFloat(x.average)),0],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1,\n                }],\n            }\n        })\n    }\n    /**\n     * TutorialAvgGraph\n     * @returns TutorialAvgGraph\n     */\n    render() {\n        const options = {\n            scales: {\n                xAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: 'Tutorial Name'\n                    },\n                }],\n                yAxes: [{\n                    display: true,\n                    scaleLabel: {\n                        display: true,\n                        labelString: \"Average Score\"\n                    },\n                }],\n            }\n            \n        }\n        return (\n            <div>\n                <Bar\n                    data={this.state.chartData}\n                    width={100}\n                    height={50}\n                    options={options}\n                />\n            </div>\n        )\n    }\n}\nexport default TutorialAvgGraph","import React, { Component } from 'react'\nimport { MDBCol, MDBContainer, MDBRow, MDBTable, MDBBtn, MDBTableBody, MDBTableHead } from 'mdbreact'\nimport Navbar from '../components/share/Navbar'\nimport Footer from '../components/share/Footer'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { showProfTutorial } from '../Redux/Actions/TutorialAction'\nimport { fetchLeaderboard } from '../Redux/Actions/GameActions'\nimport TutorialAvgGraph from '../components/reportpage/TutorialAvgGraph'\n\n\nclass Report extends Component {\n    /**\n     * state \n     * set tutgrp to local storage tutgrp\n     * set name to local storage name\n     */\n    state = {\n        tutgrp: localStorage.getItem(\"tutgrp\"),\n        name: localStorage.getItem(\"name\"),\n    }\n    componentDidMount() {\n        this.GetTutorials()\n        this.props.fetchLeaderboard();\n    }\n    /**\n     * getTutorials\n     */\n    GetTutorials = () => {\n        const form = {\n            tutgrp: this.state.tutgrp,\n            name: this.state.name\n        }\n        this.props.showProfTutorial(form);\n    }\n    /**\n     * View Report\n     * @param {*} tutid \n     * @param {*} tutname \n     */\n    ViewReport = (tutid, tutname) => {\n        localStorage.setItem(\"selectedTutId\", tutid)\n        localStorage.setItem(\"selectedTutName\", tutname)\n        this.props.history.push(\"/report\")\n    }\n    /**\n     * goBack\n     * navigate to home\n     */\n    goBack = () => this.props.history.push('/home')\n    /**\n     * ReportHome page\n     * @returns ReportHome page\n     */\n    render() {\n        let uniqueTutId = this.props.leaderboard.reduce((results, org) => {\n            (results[org.tutid] = results[org.tutid] || []).push(org);\n            return results\n        }, {})\n\n        let convertKeytoArray = Object.keys(uniqueTutId).map(k => {\n            return uniqueTutId[k]\n        })\n\n        let tutidAvg = []\n        convertKeytoArray.map(tutid => {\n            let averageOnEachtut = (tutid.map(x => parseFloat(x.score)).reduce((total, current) => total += current, 0) / tutid.length).toFixed(2)\n            let getTutName = this.props.tutorialtable.filter(x => x.tutid === tutid[0].tutid).map(z => z.tutname)\n            tutidAvg.push({ tutname: getTutName[0], average: averageOnEachtut })\n        })\n\n        let display = this.props.tutorialtable.map(x => {\n            return (\n                <tr key={x.tutid}>\n                    <td>{x.tutname}</td>\n                    <td>{x.tutgrp}</td>\n                    <td>{x.createdby}</td>\n                    <td><MDBBtn size=\"sm\" color=\"blue\" onClick={() => this.ViewReport(x.tutid, x.tutname)}> View </MDBBtn>\n                    </td>\n                </tr>\n            )\n        })\n\n        return (\n            <div>\n                <Navbar />\n                <br />\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol size=\"12\">\n                            <h3>Select Tutorial To View Report Summary</h3>\n                            <hr />\n                            <MDBTable striped hover>\n                                <MDBTableHead>\n                                    <tr>\n                                        <th>Assignment Name</th>\n                                        <th>Tutorial Group</th>\n                                        <th>Created by</th>\n                                        <th>View</th>\n                                    </tr>\n                                </MDBTableHead>\n                                <MDBTableBody>\n                                    {display}\n                                </MDBTableBody>\n                            </MDBTable>\n                        </MDBCol>\n                    </MDBRow>\n                    <br/>\n                    <MDBRow>\n                        <MDBCol size=\"12\">\n                            <h3>Overall Tutorial Performance</h3>\n                            <hr/>\n                            <TutorialAvgGraph GraphData={tutidAvg} />\n                        </MDBCol>\n                    </MDBRow>\n                    <MDBBtn onClick={this.goBack} color=\"red\">Back</MDBBtn>\n                </MDBContainer>\n                <Footer />\n            </div>\n        )\n    }\n}\nReport.propTypes = {\n    showProfTutorial: PropTypes.func.isRequired,\n    fetchLeaderboard: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    tutorialtable: state.tutorial.tutorialgrp,\n    leaderboard: state.game.records,\n});\n\nexport default connect(mapStateToProps, { showProfTutorial, fetchLeaderboard })(Report)","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Question from '../pages/Question';\nimport Home from '../pages/Home';\nimport Login from '../pages/Login';\nimport Register from '../pages/Register';\nimport Assignment from '../pages/Assignment';\nimport Logout from '../pages/Logout';\nimport Marking from '../pages/Marking';\nimport MarkingHome from '../pages/MarkingHome';\nimport StudentSelect from '../pages/StudentSelect';\nimport StudentMain from '../pages/StudentMain';\nimport StudentProfile from '../pages/StudentProfile';\nimport ProfessorProfile from '../pages/ProfessorProfile';\nimport StudentNews from '../pages/StudentNews';\nimport Compete from '../pages/Compete';\nimport Challenger from '../pages/Challenger';\nimport Competitor from '../pages/Competitor';\nimport Challenge from '../pages/Challenge';\nimport MySubmission from '../pages/MySubmission';\nimport Report from '../pages/Report';\nimport ReportHome from '../pages/ReportHome';\n\n\nclass Routes extends React.Component {\n  /**\n   * Routes\n   * @returns the path of each route\n   */\n  render() {\n    return (\n      <Switch>\n        <Route exact path='/' component={Login} />\n        <Route path='/home' component={Home} />\n        <Route path='/register' component={Register} />\n        <Route path='/question/:tutid' component={Question} />\n        <Route path='/assignment' component={Assignment} />\n        <Route path='/seltut' component={MarkingHome} />\n        <Route path='/student/:tutid' component={StudentSelect} />\n        <Route path='/marking/:id/:studid' component={Marking} />\n        <Route path='/logout' component={Logout} />\n        <Route path='/studentmain' component={StudentMain} />\n        <Route path='/studentprofile' component={StudentProfile} />\n        <Route path='/professorprofile' component={ProfessorProfile} />\n        <Route path='/studentnews' component={StudentNews} />\n        <Route path='/compete' component={Compete} />\n        <Route path='/challenger' component={Challenger} />\n        <Route path='/competitor' component={Competitor} />\n        <Route path='/submission/:id' component={MySubmission} />\n        <Route path='/report' component={Report} />\n        <Route path='/reporthome' component={ReportHome} />\n        <Route path='/challenge' component={Challenge} />\n        \n        <Route render={() => <h1>Not Found</h1>} />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n","/**\n * set intialstate \n * login, status, studentinfo, profinfo, emailcheck, myinfo to []\n */\nconst initState = {\n    login: [],\n    status: [],\n    studentinfo: [],\n    profinfo: [],\n    emailcheck: [],\n    myInfo: [],\n    mates: []\n};\n\n/**\n * AuthReducer\n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst AuthReducers = (state = initState, action) => {\n    switch (action.type) {\n        case 'FACEBOOK_LOGIN':\n            return {\n                ...state,\n                login: action.payload\n            }\n        case 'EMAIL_LOGIN':\n            return {\n                ...state,\n                login: action.payload\n            }\n        case 'REGISTER_USER':\n            return {\n                ...state,\n                status: action.payload\n            }\n        case 'TESTING':\n            return {\n                ...state,\n                status: action.payload\n            }\n        case 'GET_STUDENT_DETAILS':\n            return {\n                ...state,\n                studentinfo: action.payload\n            }\n        case 'GET_MY_DETAILS':\n            return {\n                ...state,\n                myInfo: action.payload\n            }\n        case 'GET_PROF_DETAILS':\n            return {\n                ...state,\n                profinfo: action.payload\n            }\n        case 'UPDATE_PROFILE':\n            return {\n                ...state,\n            }\n        case 'FACEBOOK_ACCOUNT_LINK':\n            return {\n                ...state,\n            }\n        case 'EMAIL_CHECK':\n            return {\n                ...state,\n                emailcheck: action.payload\n            }\n        case 'GET_CLASSMATE':\n            return {\n                ...state,\n                mates: action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default AuthReducers;\n","/**\n * set initialstate\n * item to []\n */\nconst initState = {\n    items: [],\n};\n\n/**\n * TwitterReducers\n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst TwitterReducers = (state = initState, action) => {\n    switch(action.type){\n        case 'FETCH_POST':\n            return{\n                ...state,\n                items: action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default TwitterReducers;\n","/**\n * set initialstate\n * records, studentlist, submission, completedtut, status, comeptitors.\n * challengers, comment, competitors , my score to []\n */\nconst initState = {\n    records: [],\n    studentlist: [],\n    submission: [],\n    completedtut: [],\n    status: [],\n    competitors: [],\n    challengers: [],\n    comment: [],\n    competitor: [],\n    myscore: []\n};\n\n/**\n * GameReducers\n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst GameReducers = (state = initState, action) => {\n    switch (action.type) {\n        case 'FETCH_LEADERBOARD':\n            return {\n                ...state,\n                records: action.payload\n            }\n        case 'GET_STUDENT_LIST':\n            return {\n                ...state,\n                studentlist: action.payload\n            }\n        case 'GET_STUDENT_SUBMISSION':\n            return {\n                ...state,\n                submission: action.payload\n            }\n        case 'UPDATE_SCORES':\n            return {\n                ...state,\n                status: action.payload\n            }\n        case 'MY_COMPLETED_TUT':\n            return {\n                ...state,\n                completedtut: action.payload\n            }\n        case 'SEND_COMPETE_REQUEST':\n            return {\n                ...state,\n                status: action.payload\n            }\n        case 'GET_CHALLENGERS':\n            return {\n                ...state,\n                challengers: action.payload\n            }\n        case 'GET_COMPETITORS':\n            return {\n                ...state,\n                competitors: action.payload\n            }\n        case 'SEND_COMMENT':\n            return {\n                ...state,\n                status: action.payload\n            }\n        case 'GET_COMMENT':\n            return {\n                ...state,\n                comment: action.payload\n            }\n        case 'GET_MY_SCORE':\n            return {\n                ...state,\n                myscore: action.payload\n            }\n        case 'GET_COMPETITOR_SCORE':\n            return {\n                ...state,\n                competitor: action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default GameReducers;\n","/**\n * set initialstate\n * tutoriialgrp to []\n * statis to false\n */\nconst initState = {\n    tutorialgrp: [],\n    status: false\n};\n\n/**\n * TutorialReducers\n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst TutorialReducers = (state = initState, action) => {\n    switch (action.type) {\n        case 'ADD_TUTORIAL':\n            return {\n                ...state,\n                tutorialgrp: [...state.tutorialgrp, ...action.payload],\n            }\n        case 'DELETE_TUTORIAL':\n            return {\n                ...state,\n                tutorialgrp: state.tutorialgrp.filter(x => x.tutid !== action.tutid)\n            }\n        case 'FETCH_TUTORIAL':\n            return {\n                ...state,\n                tutorialgrp: action.payload\n            }\n        case 'FETCH_USER_TUTORIAL':\n            return {\n                ...state,\n                tutorialgrp: action.payload\n            }\n        case 'FETCH_PROF_TUTORIAL':\n            return {\n                ...state,\n                tutorialgrp: action.payload\n            }\n        default:\n            return state;\n    }\n}\nexport default TutorialReducers;\n","/**\n * set initialstate\n * question, tutquestions to []\n */\nconst initState = {\n    questions: [],\n    tutquestions: []\n};\n\n/**\n * QeustReducers\n * @param {*} state \n * @param {*} action \n * @returns \n */\nconst QuestReducers = (state = initState, action) => {\n    switch (action.type) {\n        case 'SHOW_ALL_QUESTION':\n            return {\n                ...state,\n                questions: action.payload\n            }\n        case 'SHOW_TUT_QUESTION':\n            return {\n                ...state,\n                tutquestions: action.payload\n            }\n        case 'REMOVE_QUESTION':\n            return {\n                ...state,\n                tutquestions: state.tutquestions.filter(x => x.questid !== action.payload)\n            }\n        case 'ADD_QUESTION':\n            return {\n                ...state,\n                tutquestions: [...state.tutquestions, ...action.payload]\n            }\n        default:\n            return state;\n    }\n}\nexport default QuestReducers;\n","import { combineReducers } from 'redux';\nimport AuthReducers from './AuthReducers';\nimport TwitterReducers from './TwitterReducers'\nimport GameReducers from './GameReducers'\nimport TutorialReducers from './TutorialReducers';\nimport QuestReducers from './QuestReducers';\n\n/**\n * RootReducer\n */\nconst RootReducer = combineReducers({\n    twitter: TwitterReducers,\n    auth: AuthReducers,\n    game: GameReducers,\n    tutorial: TutorialReducers,\n    quest: QuestReducers\n});\n\nexport default RootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport RootReducer from '../Reducers/RootReducer'\n\n/**\n * create initial state\n */\nconst initialState = {};\nconst middleWare = [thunk];\nconst store = createStore(RootReducer, initialState, applyMiddleware(...middleWare));\n\nexport default store;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Routes from './router/Routes';\nimport Store from './Redux/Store/Store';\nimport { Provider } from 'react-redux';\n\nclass App extends Component {\n  state = {\n    collapseID: ''\n  };\n  render() {\n\n    const { collapseID } = this.state;\n    return (\n      <Provider store={Store}>\n        <Router>\n          <div className='flyout'>\n            {collapseID && overlay}\n            <main style={{ marginTop: '4rem' }}>\n              <Routes />\n            </main>  \n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}